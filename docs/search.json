[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Seminars for ESA",
    "section": "",
    "text": "This site has been developed to share knowledge on using open-source tools for environmental systems analysis (ESA). For an overview of tools developed for the field of industrial ecology, have a look at this dashboard.\nIt also contains materials for organizing a seminar series on Brightway and the Activity Browser:\n\nAn introduction,\nA first code-along seminar for doing a first LCA on the Activity Browser,\nAnother code-along seminar for doing a first LCA on Brightway,\nAn introduction to Git.\n\nThe content has been developed based on my personal experience as a life cycle assessment (LCA) practitioner. Feel free to contact me if you have suggestions for contributions or changes!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site has been developed to share knowledge on using open-source tools for environmental systems analysis (ESA). It does not aim to create new content but point to various sources to get to know the tools and to get started."
  },
  {
    "objectID": "installation_instructions.html",
    "href": "installation_instructions.html",
    "title": "Installation instructions",
    "section": "",
    "text": "For this seminar, you should have the Activity Browser running on your computer and a project with ecoinvent open. For this, you need to:\n\nIf not already done, install Python and a Python environment manager,\nInstall or update the Activity Browser,\nCreate a project with ecoinvent 3.9.1 cutoff.\n\n\n\nIf you already have Python installed, skip this step. Otherwise, follow this link to download Anaconda. Follow the installation instructions of the installer.\n\n\nIf you think that you will use Python in the future, I recommend installing and using Mamba. It is much faster for “solving environments”, i.e., for installing or updating packages, and for creating new environments. For installing it, open an “Anaconda prompt” and use the command recommended here:\nconda install -c conda-forge mamba\n\n\n\n\nOpen an “Anaconda prompt” (on Windows, you find it on the Start menu) and follow the instructions for installing the Activity Browser, using the section The thorough way. Eventually, if you have mamba installed, use mamba to install the AB.\n\n\n\nFollow the instructions on this page to:\n\ncheck that the AB starts on your computer,\ncreate a new project:\n\non the tab “Project”, click on the button “+ New” and name the project (e.g., “ab_demo”),\nunder “Databases”, click on the button “Add default data (biosphere flows and impact categories)”. This takes a few minutes.\nimport the ecoinvent 3.9.1 cutoff database:\n\nDownload from the AB (easiest): click on the button “Import”, then “Import remote data (download)”, “ecoinvent (requires login)”, use the [[ESA login for ecoinvent]], and then select version 3.9.1 and the system model “cutoff”. The import takes a few minutes (longer than the step before).\nOtherwise, on ecoquery from ecoinvent download the 7z file “ecoinvent 3.9.3_cutoff_ecoSpold02.7z”. On the AB, click on the button “Import”, and then select “Import local data”, “Local 7z-archive of ecospold2 files” and select the downloaded file."
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "Contribute",
    "section": "",
    "text": "The content of this website is in development. Feel free to contact me if you have suggestions for contributions or changes."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "This website has been created by Adeline Jerome, PhD student at the division of Environmental Systems Analysis at Chalmers University of Technology.\n\nContact information\nLinkedIn\nGitHub"
  },
  {
    "objectID": "seminar_intro.html",
    "href": "seminar_intro.html",
    "title": "Introduction to the AB and Brightway",
    "section": "",
    "text": "Seminar content\nThe aim of this one-hour presentation is:\n\nTo explain why the Activity Browser and brightway can improve one’s workflow when doing LCA,\nTo introduce the Activity Browser and brightway to an audience which is unfamiliar with coding,\nTo show some examples of workflows using both the Activity Browser and brightway for different levels of coding familiarity,\nAnd to give some tips on how to get started.\n\n\n\n\n\nLink to the slides\n\n\n\nShorter versions of the seminar\nBecause one hour can be daunting, shorter presentations are also available, with a different focus.\nIntroduction to the AB and brightway\n\n\n\n\nLink to the slides"
  },
  {
    "objectID": "ab_page.html",
    "href": "ab_page.html",
    "title": "LCA with the AB",
    "section": "",
    "text": "Installation\n\n\nLearn how to use it\n\n\n\n\n\n\nWork in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "brightway_page.html",
    "href": "brightway_page.html",
    "title": "LCA with Brightway",
    "section": "",
    "text": "Work in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "git_page.html",
    "href": "git_page.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Work in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "seminar_ab.html",
    "href": "seminar_ab.html",
    "title": "Code-along with the AB",
    "section": "",
    "text": "For this seminar, you should have the Activity Browser running on your computer and a project with ecoinvent open. For this, you need to:\n\nIf not already done, install Python and a Python environment manager,\nInstall or update the Activity Browser,\nCreate a project with ecoinvent 3.9.1 cutoff.\n\n\n\nIf you already have Python installed, skip this step. Otherwise, follow this link to download Anaconda. Follow the installation instructions of the installer.\n\n\n\nOpen an “Anaconda prompt” (on Windows, you find it on the Start menu) and follow the instructions for installing the Activity Browser, using the section The thorough way.\n\n\n\nFollow the instructions on this page to:\n\ncheck that the AB starts on your computer,\ncreate a new project:\n\non the tab “Project”, click on the button “+ New” and name the project (e.g., “ab_demo”),\nunder “Databases”, click on the button “Add default data (biosphere flows and impact categories)”. This takes a few minutes.\nimport the ecoinvent 3.9.1 cutoff database:\n\nDownload from the AB (easiest): click on the button “Import”, then “Import remote data (download)”, “ecoinvent (requires login)”, use the ESA login for ecoinvent, and then select version 3.9.1 and the system model “cutoff”. The import takes a few minutes (longer than the step before).\nOtherwise, on ecoquery from ecoinvent download the 7z file “ecoinvent 3.9.3_cutoff_ecoSpold02.7z”. On the AB, click on the button “Import”, and then select “Import local data”, “Local 7z-archive of ecospold2 files” and select the downloaded file."
  },
  {
    "objectID": "seminar_brightway.html",
    "href": "seminar_brightway.html",
    "title": "Code-along with Brightway",
    "section": "",
    "text": "For this seminar, you should have a working Brightway environment on your computer. For this, you need to:\n\nIf not already done, install Python and a Python environment manager,\nInstall or update Brightway.\n\n\n\nIf you already have Python installed, skip this step. Otherwise, follow this link to download Anaconda. Follow the installation instructions of the installer.\n\n\nIf you think that you will use Python in the future, I recommend installing and using Mamba. It is much faster for “solving environments”, i.e., for installing or updating packages, and for creating new environments. For installing it, open an “Anaconda prompt” and use the command recommended here:\nconda install -c conda-forge mamba\n\n\n\n\nOpen an “Anaconda prompt” (on Windows, you find it in the Start menu) and follow the instructions for installing Brightway."
  },
  {
    "objectID": "seminar_brightway.html#sec-seminar-brightway-python",
    "href": "seminar_brightway.html#sec-seminar-brightway-python",
    "title": "Code-along with Brightway",
    "section": "Installing Python with Anaconda",
    "text": "Installing Python with Anaconda\nIf you already have Python installed, skip this step. Otherwise, follow this link to download Anaconda. Follow the installation instructions of the installer.\n\n(Optional - Mamba)\nIf you think that you will use Python in the future, I recommend installing and using Mamba. It is much faster for “solving environments”, i.e., for installing or updating packages, and for creating new environments. For installing it, open an “Anaconda prompt” and use the command recommended here:\nconda install -c conda-forge mamba"
  },
  {
    "objectID": "seminar_brightway.html#installing-the-activity-browser",
    "href": "seminar_brightway.html#installing-the-activity-browser",
    "title": "Code-along with Brightway",
    "section": "Installing the Activity Browser",
    "text": "Installing the Activity Browser\n\n\n\n\n\n\nWork in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "seminar_git.html",
    "href": "seminar_git.html",
    "title": "Introduction to Git",
    "section": "",
    "text": "If you want to try to save your work with Git during the seminar:\n\nInstall Git on your computer,\nCreate a GitHub account if you want to have your work saved on the cloud.\n\n\n\nFor Windows, download and install Git Bash.\nFor other distributions, download and install Git here.\n\n\n\nWhen you want to backup your work on the cloud with Git, your code is sent to a GitHub repository. For this, you need to create a GitHub account. Remember the email to you use to create your account!"
  },
  {
    "objectID": "git_page.html#handbooks",
    "href": "git_page.html#handbooks",
    "title": "Git and GitHub",
    "section": "Handbooks",
    "text": "Handbooks\n\nLet’s Git started contains information to use Git for R on RStudio but most of the information are applicable for other applications as well."
  },
  {
    "objectID": "git_page.html#courses",
    "href": "git_page.html#courses",
    "title": "Git and GitHub",
    "section": "Courses",
    "text": "Courses\n\nThe course Reproducible Research in R has a section on Git which I recommend to understand why and how to do proper version control with Git."
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#python",
    "href": "presentations/presentation_seminar_intro.html#python",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Python",
    "text": "Python"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#python-packages",
    "href": "presentations/presentation_seminar_intro.html#python-packages",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Python packages",
    "text": "Python packages\n\n\n\n\nExamples:\n\npandas for data tables manipulation,\nmatplotlib for figures,\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#brightway",
    "href": "presentations/presentation_seminar_intro.html#brightway",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#code-editor",
    "href": "presentations/presentation_seminar_intro.html#code-editor",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Code editor",
    "text": "Code editor\n\n\n\n\nExamples:\n\nJupyter\nSpider\nPyCharm\nVisual Studio Code\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#the-activity-browser",
    "href": "presentations/presentation_seminar_intro.html#the-activity-browser",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#reproducibility-and-transparency",
    "href": "presentations/presentation_seminar_intro.html#reproducibility-and-transparency",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Reproducibility and transparency",
    "text": "Reproducibility and transparency\n\n\nFor understanding what you did\nFor the others to understand what you did\nFor you/others to use the same methodology"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#easier-to-update",
    "href": "presentations/presentation_seminar_intro.html#easier-to-update",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Easier to update",
    "text": "Easier to update\n\n\nLess room for error when updating data inputs\nAutomatic update of the whole work\nUpdate/change ecoinvent (the background database)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#greater-flwxibility",
    "href": "presentations/presentation_seminar_intro.html#greater-flwxibility",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Greater flwxibility",
    "text": "Greater flwxibility"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#easier-version-control",
    "href": "presentations/presentation_seminar_intro.html#easier-version-control",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Easier version control",
    "text": "Easier version control"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#easier-version-control-with-git",
    "href": "presentations/presentation_seminar_intro.html#easier-version-control-with-git",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Easier version control with Git",
    "text": "Easier version control with Git\n\n\nChange-tracking\nBackup\nCollaboration"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#brightway-1",
    "href": "presentations/presentation_seminar_intro.html#brightway-1",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway\n\n\nFast calculations\nParameters in the inventory\nUncertainty analysis (Monte-Carlo simulation)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#brightway-2",
    "href": "presentations/presentation_seminar_intro.html#brightway-2",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway\nAnd extensions for:\n\n\nRegionalization with bw2regional\nTemporal distributions in the inventory and for characterization factors with temporalis\nProspective foreground databases based on IAM with premise\nGlobal sensitivity analysis with lca_algebraic\nStill in development: collaborative work on the same LCA model on a server"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#the-activity-browser-1",
    "href": "presentations/presentation_seminar_intro.html#the-activity-browser-1",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser\nSimilar to brightway but more user friendly. Advanced tasks:\n\n\nUse of scenarios\nVisualization tools (Sankey diagram)\nPlugin for prospective background databases with premise"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#yes-you-can",
    "href": "presentations/presentation_seminar_intro.html#yes-you-can",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Yes you can!",
    "text": "Yes you can!"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#greater-flexibility",
    "href": "presentations/presentation_seminar_intro.html#greater-flexibility",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Greater flexibility",
    "text": "Greater flexibility\n\n\nNon-standard LCA methodological choices\nConnection to other tools (e.g., IAM, statistics, ML)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#my-initial-workflow",
    "href": "presentations/presentation_seminar_intro.html#my-initial-workflow",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "My initial workflow",
    "text": "My initial workflow"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#my-ideal-workflow",
    "href": "presentations/presentation_seminar_intro.html#my-ideal-workflow",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "My ideal workflow",
    "text": "My ideal workflow"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#get-help",
    "href": "presentations/presentation_seminar_intro.html#get-help",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Get help",
    "text": "Get help\n\n\nFrom your colleagues 👋\nFrom ChatGPT\nFrom the documentation or user manual\nFrom the community:\n\nOn mail distribution lists on groups.io\nOn Stackoverflow\nOn GitHub (for bugs)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#main-source-of-information",
    "href": "presentations/presentation_seminar_intro.html#main-source-of-information",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Main source of information",
    "text": "Main source of information\nGo to the GiHub pages (the AB, brightway) to find updated information or links to:\n\nInstall the tools,\nLearn how to use it,\nFind examples."
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html#website-to-gather-tips-and-resources",
    "href": "presentations/presentation_seminar_intro.html#website-to-gather-tips-and-resources",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Website to gather tips and resources",
    "text": "Website to gather tips and resources\nSeminars for ESA as an initial resource.\nYou are welcome to contribute!"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Python",
    "section": "",
    "text": "Python is a programming language that can be used for many purposes (e.g., data manipulations, calculations, machine learning, graphical user interfaces, web applications).\nIt is, among others, an object-oriented language, meaning that objects with attributes are manipulated. For instance, for doing an LCA, possible objects and their attributes are:\n\na process: name, unit, location, etc.\na flow: sending process, receiving process, quantity, uncertainty, etc.\nan impact category method: name, unit, list of characterization factors, etc.\n\nThen, functions or methods are available to manipulate the objects.\nFor a given project, not all objects available for Python are necessary. For instance, objects for doing an LCA are not necessary when doing machine learning, and vice versa. Python is organised in packages, i.e., groups of objects and functions usually developed for a specific application."
  },
  {
    "objectID": "rstat.html",
    "href": "rstat.html",
    "title": "R and RStudio",
    "section": "",
    "text": "Work in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "python.html#optional---mamba",
    "href": "python.html#optional---mamba",
    "title": "Python",
    "section": "(Optional - Mamba)",
    "text": "(Optional - Mamba)\nIf you think that you will use Python in the future, I recommend installing and using Mamba. It is much faster for “solving environments”, i.e., for installing or updating packages, and for creating new environments. For installing it, open an “Anaconda prompt” and use the command recommended here:\nconda install -c conda-forge mamba"
  },
  {
    "objectID": "presentations/presentation_seminar_intro.html",
    "href": "presentations/presentation_seminar_intro.html",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "",
    "text": "Find the slides at adelinejerome.github.io/seminars-for-esa/seminar_intro.html"
  },
  {
    "objectID": "python.html#navigating-between-environments",
    "href": "python.html#navigating-between-environments",
    "title": "Python",
    "section": "Navigating between environments",
    "text": "Navigating between environments\nTo print the list of installed environment, use:\nconda info --envs\nTo activate an environment, i.e., to use a specific environment, use:\nconda activate my_env\nReplace my_env with the name of the environment that you want to use. You can see that the environment is activated by having its name in parenthesis. You can have several environments running in parallel (e.g., one for brightway and one for the Activity browser). For that, open several Anaconda prompts and activate different environments in each.\nTo deactivate or exit an environment, use:\nconda deactivate"
  },
  {
    "objectID": "python.html#managing-packages",
    "href": "python.html#managing-packages",
    "title": "Python",
    "section": "Managing packages",
    "text": "Managing packages\nThe name of the activated environment is displayed in parenthesis at the beginning of the code line in the Anaconda prompt. To get the list of packages installed in your environment, use:\nconda list\nThis is often very useful when you report an error or bug! People can see which version of the packages might cause the error. This list can be saved in a text file with:\nconda env export > environment.txt\nTo get the Python version that is used by the environment, use:\npython --version\nYou can install a package, here package_name with:\nconda install package_name\nOr update a package with:\nconda update package_name\n\n\n\n\n\n\nNote\n\n\n\nFor installing and updating packages/environments, you can use mamba by replacing conda with mamba in the code above."
  },
  {
    "objectID": "python.html#cheatsheets",
    "href": "python.html#cheatsheets",
    "title": "Python",
    "section": "Cheatsheets",
    "text": "Cheatsheets\nVery useful for beginners (or advanced users!) to have an overview of available commands:\n\nFor data wrangling with pandas\nFor generating figures with matplotlib"
  },
  {
    "objectID": "python.html#handbooks",
    "href": "python.html#handbooks",
    "title": "Python",
    "section": "Handbooks",
    "text": "Handbooks\n\nPython for Data Analysis"
  },
  {
    "objectID": "python.html#create-a-new-environment",
    "href": "python.html#create-a-new-environment",
    "title": "Python",
    "section": "Create a new environment",
    "text": "Create a new environment\nTo create a new environment called my_env, use:\nconda create -n my_env\nThis environment will then be empty (i.e., no python installed). To install an environment directly with a specific package package_name, use:\nconda create -n my_env package_name"
  },
  {
    "objectID": "seminar_ab.html#introduction-to-environment-management",
    "href": "seminar_ab.html#introduction-to-environment-management",
    "title": "Code-along with the AB",
    "section": "Introduction to environment management",
    "text": "Introduction to environment management\nThe information presented is available here\n\n\n\n\n\n\nWork in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "seminar_ab.html#introduction-to-python-environment-management",
    "href": "seminar_ab.html#introduction-to-python-environment-management",
    "title": "Code-along with the AB",
    "section": "Introduction to Python environment management",
    "text": "Introduction to Python environment management\nThe information presented is available here."
  },
  {
    "objectID": "seminar_ab.html#introduction-to-the-ab",
    "href": "seminar_ab.html#introduction-to-the-ab",
    "title": "Code-along with the AB",
    "section": "Introduction to the AB",
    "text": "Introduction to the AB\n\n\n\n\n\n\nWork in progress\n\n\n\nThis section is still in development!"
  },
  {
    "objectID": "presentations/presentation_seminar_ab.html#system-to-be-modelled",
    "href": "presentations/presentation_seminar_ab.html#system-to-be-modelled",
    "title": "Code-alond seminar with the AB",
    "section": "System to be modelled",
    "text": "System to be modelled"
  },
  {
    "objectID": "seminar_ab.html#first-lca-with-the-ab",
    "href": "seminar_ab.html#first-lca-with-the-ab",
    "title": "Code-along with the AB",
    "section": "First LCA with the AB",
    "text": "First LCA with the AB\nAs an example, we will reproduce a simplified version of the results in Jerome et al. (2023). All the data are from the article and the supplementary information. The aim is the compare the LCA results for motors with different energy efficiency, and with and without their use extension with repair.\n\nLCA model construction\nCreate a new database by clicking on the button “+ New” besides “Databases”. Name your database, e.g., motor_case.\nThe first activity that we will use is electricity production. Go to your ecoinvent database, search for the market for electricity, high voltage for Sweden (SE). Right click on the activity and choose “Duplicate activity to new location” to duplicate the activity to your new database.\nCreate parameters in the tab “Parameters”. Create the following project parameters:\n\n\n\n\n\n\n\n\nName\nValue\nDescription\n\n\n\n\nsteel_unalloyed\n26600\nQuantity (kg) of unalloyed steel in the motor\n\n\nsteel_low_alloyed\n4100\nQuantity (kg) of low alloyed steel in the motor\n\n\ncopper\n3600\nQuantity (kg) of copper in the motor\n\n\ninsulation\n400\nQuantity (kg) of insulation in the motor\n\n\noutput_power\n16000\nOutput power (kW) of the motor\n\n\nop_hours\n8400\nDuration (hours) of operating time per year\n\n\nlifetime\n20\nLifetime (years) of the motor\n\n\nefficiency\n0.973\nEfficiency of the motor\n\n\n\nTo create new activities, right click on the name of your new database and select “+ Add new activity”. Create the following activities:\n\nmotor production, producing 1 unit of motor, with:\n\nsteel_unalloyed kg of market for steel, unalloyed - GLO\nsteel_low_alloyed kg of market for steel, low-alloyed - GLO\ncopper kg of market for copper, cathode - GLO\ninsulation kg of market for epoxy resin, liquid - RER\n3600 kWh of electricity from the duplicated electricity activity\n\nmotor testing, producing 1 unit of motor, tested, with:\n\n1 unit of motor from motor production\n16000 kWh of electricity from the duplicated electricity activity\n\nmotor use, producing 1 unit of motor, used, with:\n\n1 unit of motor, tested from motor testing\nelectricity from the duplicated electricity activity and using the formula output_power*op_hours*lifetime*(1/efficiency-1) for having only the energy losses during the use of the motor\n\nmotor EoL treatment, producing 1 unit of motor, treated, with:\n\n1 unit of motor, used from motor use\n0.041*(steel_unalloyed+steel_low_alloyed+copper+insulation) of electricity from the duplicated electricity activity\ninsulation kg of treatment of waste plastic, mixture, municipal incineration with fly ash extraction - CH\n0.04*copper kg of treatment of copper in car shredder residue, municipal incineration with fly ash extraction - CH\n\n\n\nDownload the database solution as an Excel file or as a brightway package\n\n\n\nMotor efficiency scenarios\nIn the tab “Parameters”, select the tab “Scenarios”. Click on the button “Export parameter-scenarios” to download the Excel file format for generating scenarios.\nCreate the following scenarios:\n\n\n\n\n\n\n\n\n\n\nName\nlow_efficiency\nhigh_efficiency\nrepair_low_efficiency\nrepair_high_efficiency\n\n\n\n\nsteel_unalloyed\n26600\n18000\n26600\n18000\n\n\nsteel_low_alloyed\n4100\n9200\n4100\n9200\n\n\ncopper\n3600\n3800\n5400\n5700\n\n\ninsulation\n400\n300\n600\n450\n\n\noutput_power\n16000\n16000\n16000\n16000\n\n\nop_hours\n8400\n8400\n8400\n8400\n\n\nlifetime\n20\n20\n40\n40\n\n\nefficiency\n0,973\n0,9835\n0,973\n0,9835\n\n\n\n\nDownload the solution\n\n\n\nBonus - Future electricity mixes scenarios\nScenarios about the future Swedish electricity mix can be found in this report. The scenarios can be summarised as:\n\n\n\n\n\n\n\n\n\n\n\nSource\nDefault\nMore solar and wind\nMore bio fuel\nNew nuclear plants\nMore hydro\n\n\n\n\nHydro\n0.40\n0.41\n0.41\n0.41\n0.53\n\n\nWind\n0.12\n0.34\n0.25\n0.12\n0.22\n\n\nSolar\n0.03\n0.09\n0.03\n0.03\n0.03\n\n\nBio fuel\n0.03\n0.16\n0.31\n0.13\n0.22\n\n\nNuclear\n0.39\n0\n0\n0.31\n0\n\n\nImport\n0.03\n0\n0\n0\n0\n\n\n\n\nDownload the solution"
  },
  {
    "objectID": "presentations/presentation_seminar_ab.html",
    "href": "presentations/presentation_seminar_ab.html",
    "title": "Code-alond seminar with the AB",
    "section": "",
    "text": "See commands here"
  },
  {
    "objectID": "seminar_ab.html#introduction-to-python-environment",
    "href": "seminar_ab.html#introduction-to-python-environment",
    "title": "Code-along with the AB",
    "section": "Introduction to Python environment",
    "text": "Introduction to Python environment\nThe information presented is available here."
  },
  {
    "objectID": "presentations/presentation_seminar_bright.html#system-to-be-modelled",
    "href": "presentations/presentation_seminar_bright.html#system-to-be-modelled",
    "title": "Code-along seminar with brightway",
    "section": "System to be modelled",
    "text": "System to be modelled"
  },
  {
    "objectID": "resources/basics_of_python.html",
    "href": "resources/basics_of_python.html",
    "title": "Welcome!",
    "section": "",
    "text": "Here are some Python basics to understand coding with brightway."
  },
  {
    "objectID": "resources/basics_of_python.html#lists",
    "href": "resources/basics_of_python.html#lists",
    "title": "Welcome!",
    "section": "Lists",
    "text": "Lists\nGroup of objects with an order, indexed by consecutive integers (starting at 0)\n\nlist_1 = [\"a\", \"b\", \"c\", \"d\"]\nlist_1\n\n['a', 'b', 'c', 'd']\n\n\n\n# acces the object in position 2\nlist_1[2]\n\n'c'\n\n\n\n# List length\nlen(list_1)\n\n4\n\n\n\n# We can modify a specific element in the list\nlist_1[0]=\"foo\"\nprint(list_1)\n\n# Add an element at the end of the list\nlist_1.append(\"bar\")\nprint(list_1)\n\n# Remove one element\ndel list_1[1]\nprint(list_1)\n\n['foo', 'b', 'c', 'd']\n['foo', 'b', 'c', 'd', 'bar']\n['foo', 'c', 'd', 'bar']\n\n\n\n# We can concatenate lists\n[\"a\", \"b\"] + [1, 2]\n\n['a', 'b', 1, 2]"
  },
  {
    "objectID": "resources/basics_of_python.html#tuples",
    "href": "resources/basics_of_python.html#tuples",
    "title": "Welcome!",
    "section": "Tuples",
    "text": "Tuples\nTuples are groups of objects, ordered, but they cannot be changed (used, e.g., for coordinates).\n\na=(1, 2, 3)\na[1]\n\n2\n\n\n\n# test of changing a value\na[1] = 4\n\nTypeError: 'tuple' object does not support item assignment"
  },
  {
    "objectID": "resources/basics_of_python.html#dictionaries",
    "href": "resources/basics_of_python.html#dictionaries",
    "title": "Welcome!",
    "section": "Dictionaries",
    "text": "Dictionaries\nA group of objects without order, with a key and a definition, indexed by the keys.\n\ndic1 = {\"key 1\": 1, \"key 2\": [\"a\", 0]}\n\n\n# Add a value \ndic1[\"other key\"] = 4\nprint(dic1)\n\n# Modify a value \ndic1[\"key 1\"] = 5\nprint(dic1)\n\n# Remove a value\ndel dic1[\"key 2\"]\nprint(dic1)\n\n{'key 1': 1, 'key 2': ['a', 0], 'other key': 4}\n{'key 1': 5, 'key 2': ['a', 0], 'other key': 4}\n{'key 1': 5, 'other key': 4}\n\n\n\n# List of keys\nprint(dic1.keys())\n\n# List of values\nprint(dic1.values())\n\n# Lists of key-value pairs\nprint(dic1.items())\n\ndict_keys(['key 1', 'other key'])\ndict_values([5, 4])\ndict_items([('key 1', 5), ('other key', 4)])"
  },
  {
    "objectID": "resources/basics_of_python.html#conditional-structure-if",
    "href": "resources/basics_of_python.html#conditional-structure-if",
    "title": "Welcome!",
    "section": "Conditional structure (if)",
    "text": "Conditional structure (if)\nTypical commands : if.. then:.. else allows one or other block to be executed depending on a condition.\n\na=2\n\nif a%2 == 0 :\n    print(\"A is even (We are in the block 'then')\")    \nelse :\n    print(\"A is odd (We are in the block 'else')\")\n\n# No indentation : we are in the common code block\nprint(\"Common code\")\n\nA is even (We are in the block 'then')\nCommon code"
  },
  {
    "objectID": "resources/basics_of_python.html#for-loop",
    "href": "resources/basics_of_python.html#for-loop",
    "title": "Welcome!",
    "section": "“for” loop",
    "text": "“for” loop\n“for” loop allows the repetition of a code block for all elements over a given sequence.\n\na = [\"a\", \"b\", \"c\"]\n\nfor count, element in enumerate(a):\n    print(\"Element: %s, count:%d\" % (element, count))\n\nElement: a, count:0\nElement: b, count:1\nElement: c, count:2\n\n\n\nfor i in range(3):\n    print(i)\n\n0\n1\n2\n\n\n\n# Loop on a dictionary\ndic = {\"key 1\": 2, \"key 2\": 5}\n\nfor key, val in dic.items() :\n    print(\"Key: %s, val: %d\" % (key, val))\n\nKey: key 1, val: 2\nKey: key 2, val: 5"
  },
  {
    "objectID": "resources/brightway_seminar.html",
    "href": "resources/brightway_seminar.html",
    "title": "Welcome!",
    "section": "",
    "text": "This notebook has been developed for a code-along introductory seminar on using brightway. You can a more complete guide on brightway here.\nMore information on the seminars can be found here."
  },
  {
    "objectID": "resources/brightway_seminar.html#import-the-biosphere-database",
    "href": "resources/brightway_seminar.html#import-the-biosphere-database",
    "title": "Welcome!",
    "section": "Import the “biosphere” database",
    "text": "Import the “biosphere” database\n\nbi.bw2setup()\n\nSave the biosphere database as biosphere_db."
  },
  {
    "objectID": "resources/brightway_seminar.html#import-ecoinvent",
    "href": "resources/brightway_seminar.html#import-ecoinvent",
    "title": "Welcome!",
    "section": "Import ecoinvent",
    "text": "Import ecoinvent\nWhen the biosphere database is imported, the ecoinvent database can be imported as well. The importer uses the folder “datasets” from the extracted files of the .7z file which can be fount on the ecoinvent website. Report the path of this folder below.\n!!! Be careful that the path is with “/” instead of “\\”\n\npath_datasets = \"C:/Users/jeromea/Downloads/ecoinvent_3.9.1_cutoff_ecoSpold02/datasets\"\n\nThe name of the imported database will be:\n\nei_db_name = \"ecoinvent_391_cutoff\"\n\nAfter checking that the same database is not imported twice, the import is done is several steps:\n\nFirst, all the datasets are loaded with bi.SingleOutputEcospold2Importer,\nThen, the data are changed based on several “strategies” which are functions to modify the data,\nYou can check that things went well with statistics(), especially that there is “0 unlinked exchanges”\nFinally, the database, for now only in the memory for your python session, is saved to your computer with write_database()\n\n\nif ei_db_name in bd.databases:\n    print(\"Database has already been imported.\")\nelse:\n    ei_importer = bi.SingleOutputEcospold2Importer(path_datasets, ei_db_name)\n    ei_importer.apply_strategies()\n    ei_importer.statistics() \n    ei_importer.write_database()\n\nDatabase has already been imported.\n\n\nYou can see all the metadata (i.e., the properties for describing the database) of the imported database with:\nSave the ecoinvent database as ei_db:"
  },
  {
    "objectID": "resources/brightway_seminar.html#accessing-activities-and-flows",
    "href": "resources/brightway_seminar.html#accessing-activities-and-flows",
    "title": "Welcome!",
    "section": "Accessing activities and flows",
    "text": "Accessing activities and flows\nTo search for activities in a database:\nTo return (or “get”) a specific activity object:\nTo look at all information stored in the activity:\nTo look at the exchanges:"
  },
  {
    "objectID": "resources/brightway_seminar.html#create-the-database",
    "href": "resources/brightway_seminar.html#create-the-database",
    "title": "Welcome!",
    "section": "Create the database",
    "text": "Create the database\nFunction to delete a database if it exists in the current project:\n\ndef reset_brightway_database(db_name):\n    if db_name in bd.databases:\n        del bd.databases[db_name]\n\nCreate a new database:\nLet’s check that it was created:"
  },
  {
    "objectID": "resources/brightway_seminar.html#add-activities",
    "href": "resources/brightway_seminar.html#add-activities",
    "title": "Welcome!",
    "section": "Add activities",
    "text": "Add activities\nFunction to delete an activity:\n\ndef reset_activity(act_name, database=motor_db):\n    for activity in [act for act in motor_db if act['name']==act_name]:\n        activity.delete()\n\nNameError: name 'motor_db' is not defined\n\n\nCreate an activity:\nCreate an exchange:\nInputs from ecoinvent\nFirst, let get the necessary activities from ecoinvent:\n\nact_steel_low_alloyed = ei_db.get(name=\"market for steel, low-alloyed\", location=\"GLO\")\n\n\nact_copper = ei_db.get(name=\"market for copper, cathode\", location=\"GLO\")\n\n\nact_insulation = ei_db.get(name=\"market for epoxy resin, liquid\", location=\"RER\")\n\n\nact_elec = ei_db.get(name=\"market for electricity, high voltage\", location=\"SE\")\n\n\nact_incineration_insulation = ei_db.get(name=\"treatment of waste plastic, mixture, municipal incineration with fly ash extraction\", location=\"CH\", unit=\"kilogram\")\n\n\nact_incineration_copper = ei_db.get(name=\"treatment of copper in car shredder residue, municipal incineration with fly ash extraction\", location=\"CH\")\n\nParameters\nThen the value of different parameters useful to create the activities.\n\nqt_steel_unalloyed = 26600 #kg\nqt_steel_low_alloyed = 4100 #kg\nqt_copper = 3600 #kg\nqt_insulation = 400 #kg\nweight_motor = qt_steel_unalloyed + qt_steel_low_alloyed + qt_copper + qt_insulation\noutput_power = 16000 #kW\nop_hours = 8400 #hours per year\nlifetime = 20 #years\nefficiency = 0.973\n\nActivities creation"
  },
  {
    "objectID": "resources/brightway_seminar.html#selection-of-impact-assessment-methods",
    "href": "resources/brightway_seminar.html#selection-of-impact-assessment-methods",
    "title": "Welcome!",
    "section": "Selection of impact assessment methods",
    "text": "Selection of impact assessment methods\nList of all available methods:\nFor searching in the list of methods, use conditions in the list:\nMethods can be selected when knowing the tuple for their name:\nOr by selecting the items in a list:"
  },
  {
    "objectID": "resources/brightway_seminar.html#impact-assessment",
    "href": "resources/brightway_seminar.html#impact-assessment",
    "title": "Welcome!",
    "section": "Impact assessment",
    "text": "Impact assessment\nCalculate another impact category:\nHere is a function to calculate the impact for several impact categories and return the results in a table:\n\ndef lca_results(fu, list_methods):\n    list_units = [bd.methods.get(method)[\"unit\"] for method in list_methods]\n    lca = bc.LCA(demand=fu, method=list_methods[0])\n    lca.lci()\n    lca.lcia()\n    list_scores = [lca.score]\n    for method in list_methods[1:]:\n        lca.switch_method(method)\n        lca.lcia()\n        list_scores.append(lca.score)\n    return pd.DataFrame({\"score\": list_scores, \"unit\": list_units, \"method\": list_methods})"
  },
  {
    "objectID": "resources/brightway_seminar.html#basic-contribution-analysis",
    "href": "resources/brightway_seminar.html#basic-contribution-analysis",
    "title": "Welcome!",
    "section": "Basic contribution analysis",
    "text": "Basic contribution analysis\nBrightway provides functions for contribution analysis with the top processes:\nAnd with the top contributing elementary flows:"
  },
  {
    "objectID": "resources/brightway_seminar.html#customised-contribution-analysis",
    "href": "resources/brightway_seminar.html#customised-contribution-analysis",
    "title": "Welcome!",
    "section": "Customised contribution analysis",
    "text": "Customised contribution analysis\nHere I provide functions for contribution analysis for the processes in the created database:\n\ndef table_recursive_multi_calculation_dbparent_cut(activity, lcia_methods, amount=1, level=0, max_level=3, db_parent=None, db_cut=['ecoinvent'], act_parent={\"name\": None}):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain sub-activities if the activity is from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, activity parent, database parent, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], act_parent[\"name\"], db_parent]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"activity parent\", \"database parent\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        db_parent = activity['database']\n        go_forward = True\n        for stop_word in db_cut:\n            if stop_word in db_parent:\n                go_forward = False\n        if go_forward:\n            for exc in activity.technosphere():\n                table = pd.concat([table, table_recursive_multi_calculation_dbparent_cut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_parent = db_parent,\n                    act_parent = activity\n                )], ignore_index=True)\n    return table\n\n\ndef table_recursive_multi_calculation_dbcut(activity, lcia_methods, amount=1, level=0, max_level=3, db_activity='motor_case', db_cut=['ecoinvent', 'biosphere']):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain activities if they are from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, database, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], db_activity]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"database\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        for exc in activity.technosphere():\n            db_exc = exc.input['database']\n            go_forward = True\n            for stop_word in db_cut:\n                if stop_word in db_exc:\n                    go_forward = False\n            if go_forward:\n                table = pd.concat([table, table_recursive_multi_calculation_dbcut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_activity = db_exc\n                )], ignore_index=True)\n    return table"
  },
  {
    "objectID": "resources/brightway_seminar.html#figures",
    "href": "resources/brightway_seminar.html#figures",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\nHere is a way to generate a box plot figure.\n\nown_colors = {\n    \"motor production\":\"#1f78b4\", #blue\n    \"motor use\":\"#969696\", #gray\n    \"motor EoL treatment\": \"#41ae76\", #green\n    \"motor testing\":\"#fff7bc\" #yellow\n}\n\n\ntable_results = \n\n\ndef basic_bar_chart(table_results, legend_x_axis, own_colors=own_colors):\n    table_figure = table_results.set_index(table_results[\"activity\"])\n    number_methods = table_figure.shape[1] - 3\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [0]\n\n    for n_fig, method in enumerate(table_figure.columns[3:]):\n        for activity in table_figure.index:\n            if n_fig == 0:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    label=activity, \n                    color=own_colors[activity]\n                )\n            else:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    color=own_colors[activity]\n                )\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels([legend_x_axis[n_fig]], fontsize=14)\n    \n    fig.legend(loc='lower center', ncol=5)\n    plt.subplots_adjust(bottom=0.15)\n    \n    return plt.show()"
  },
  {
    "objectID": "resources/brightway_seminar.html#data",
    "href": "resources/brightway_seminar.html#data",
    "title": "Welcome!",
    "section": "Data",
    "text": "Data\n\ndata_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600, #kg\n    \"qt_insulation\": 400, #kg\n    \"weight_motor\": 26600+4100+3600+400, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800, #kg\n    \"qt_insulation\": 300, #kg\n    \"weight_motor\": 18000+9200+3800+300, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.9835\n}\n\n\ndata_repair_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600*1.5, #kg\n    \"qt_insulation\": 400*1.5, #kg\n    \"weight_motor\": 26600+4100+3600*1.5+400*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_repair_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800*1.5, #kg\n    \"qt_insulation\": 300*1.5, #kg\n    \"weight_motor\": 18000+9200+3800*1.5+300*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.9835\n}"
  },
  {
    "objectID": "resources/brightway_seminar.html#generation-of-results",
    "href": "resources/brightway_seminar.html#generation-of-results",
    "title": "Welcome!",
    "section": "Generation of results",
    "text": "Generation of results"
  },
  {
    "objectID": "resources/brightway_seminar.html#figures-1",
    "href": "resources/brightway_seminar.html#figures-1",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\n\ndef figure_comparison_scenarios(table_results_scenarios, legend_x_axis):\n    number_methods = 2\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [i for i in range(len(dict_scenarios))]\n\n    for index in table_results_scenarios.index:\n        ax[index%2].bar(x_axis[index//2], table_results_scenarios.loc[index, \"score\"])\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels(legend_x_axis, rotation=90)\n        ax[n_fig].set_ylabel(table_results_scenarios.loc[n_fig, \"unit\"])\n\n    plt.subplots_adjust(wspace=0.3)\n    \n    return plt.show()"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html",
    "href": "resources/brightway_seminar_solution.html",
    "title": "Welcome!",
    "section": "",
    "text": "This notebook has been developed for a code-along introductory seminar on using brightway. You can a more complete guide on brightway here.\nMore information on the seminars can be found here."
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#import-the-biosphere-database",
    "href": "resources/brightway_seminar_solution.html#import-the-biosphere-database",
    "title": "Welcome!",
    "section": "Import the “biosphere” database",
    "text": "Import the “biosphere” database\nThe biosphere database is containing the elementary flows necessary for ecoinvent. To load it as well as the impact assessment methods implemented with ecoinvent, use:\n\nbi.bw2setup()\n\nBiosphere database already present!!! No setup is needed\n\n\nTo search activities in a database or manipulate a database, you need to refer to the database “object”. Here, the biosphere database is saved as biosphere_db.\n\nbiosphere_db = bd.Database(\"biosphere3\")"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#import-ecoinvent",
    "href": "resources/brightway_seminar_solution.html#import-ecoinvent",
    "title": "Welcome!",
    "section": "Import ecoinvent",
    "text": "Import ecoinvent\nWhen the biosphere database is imported, the ecoinvent database can be imported as well. The importer uses the folder “datasets” from the extracted files of the .7z file which can be fount on the ecoinvent website. Report the path of this folder below.\n!!! Be careful that the path is with “/” instead of “\\”\n\npath_datasets = \"C:/Users/jeromea/Downloads/ecoinvent_3.9.1_cutoff_ecoSpold02/datasets\"\n\nThe name of the imported database will be:\n\nei_db_name = \"ecoinvent_391_cutoff\"\n\nAfter checking that the same database is not imported twice, the import is done is several steps:\n\nFirst, all the datasets are loaded with bi.SingleOutputEcospold2Importer,\nThen, the data are changed based on several “strategies” which are functions to modify the data,\nYou can check that things went well with statistics(), especially that there is “0 unlinked exchanges”\nFinally, the database, for now only in the memory for your python session, is saved to your computer with write_database()\n\n\nif ei_db_name in bd.databases:\n    print(\"Database has already been imported.\")\nelse:\n    ei_importer = bi.SingleOutputEcospold2Importer(path_datasets, ei_db_name)\n    ei_importer.apply_strategies()\n    ei_importer.statistics() \n    ei_importer.write_database()\n\nDatabase has already been imported.\n\n\nYou can see all the metadata (i.e., the properties for describing the database) of the imported database with:\n\nbd.databases[ei_db_name]\n\n{'overwrite': False,\n 'format': 'Ecoinvent XML',\n 'depends': ['biosphere3'],\n 'backend': 'sqlite',\n 'number': 21238,\n 'modified': '2023-12-04T09:50:17.995532',\n 'geocollections': ['world'],\n 'processed': '2023-12-04T09:53:25.028690',\n 'dirty': False,\n 'searchable': True}\n\n\nAgain, save the database “object” to easily search and get activities from it:\n\nei_db = bd.Database(ei_db_name)"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#accessing-activities-and-flows",
    "href": "resources/brightway_seminar_solution.html#accessing-activities-and-flows",
    "title": "Welcome!",
    "section": "Accessing activities and flows",
    "text": "Accessing activities and flows\nTo search for activities in a database, use the function search. This function is linked to a database object, so it is written as bd.Database(\"database_name\").search(). To avoid the long bd.Database(\"database_name\"), the saved dtabase objects are used.\n\nbiosphere_db.search(\"Carbon dioxide, fossil\")\n\n['Carbon dioxide, fossil' (kilogram, None, ('air', 'low population density, long-term')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air',)),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'non-urban air or from high stacks')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'urban air close to ground')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'lower stratosphere + upper troposphere')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'non-urban air or from high stacks')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'lower stratosphere + upper troposphere')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air',)),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'low population density, long-term')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'urban air close to ground')),\n 'Carbon dioxide, non-fossil, resource correction' (kilogram, None, ('natural resource', 'in air'))]\n\n\nTo return (or “get”) a specific activity object, use bd.Database(\"database_name\").get() for which you can specify the name, location, unit, etc.\nBut remember that it can return only one activity! Otherwise, it returns an error. Look for the name, location, etc. with the search function before to know if you catch only one activity.\n\nexample_transport = ei_db.get(name=\"transport, passenger car, medium size, petrol, EURO 3\", location=\"RER\")\n\nTo look at all information stored in the activity (but still not the exchanges), use the function as_dict on the activity object:\n\nexample_transport.as_dict()\n\n{'comment': 'This dataset represents the service of transport in a passenger car for a journey length of 1vkm and is valid for Europe. Fuel consumption and emissions are for average vehicle use and not representative of a specific driving cycle. The dataset is parametrized with respect to vehicle size, fuel consumption and vehicle lifetime. \\nDatasets for three different passenger car categories are available in ecoinvent in view of size: small, medium and large.\\nThe category “small” includes passenger cars with engine size up to 1.4 liters. The average weight of this category is estimated to be 1200 kg. \\nThe category “medium” includes passenger cars with engine size between 1.4 and 2.0 liters. The average weight of this category is estimated to be 1600 kg. \\nThe category “large” includes passenger cars with engine size larger than 2.0 liters. The average weight of this category is estimated to be 2000 kg. \\nThe passenger car size influences the amount of both exhaust and non-exhaust emissions. The exhaust emissions caused by the burning of fuel are divided into two groups: fuel dependent emissions (dependent on fuel type and quantity) and Euro class dependent emissions which reflect the emission standards which the vehicle complies with. Three classes of Euro engine type are considered: Euro 3, Euro 4 and Euro 5.  The higher the class (e.g. Euro 5), the lower the emissions and viceversa. The Euro engine regulation is set by the European Commission “in order to limit as much as possible the negative impact of road vehicles on the environment and health” (European Commission 2012). This dataset considers a medium petrol passenger car of Euro 3 class. Also included within the direct exchanges to the environment are the fuel evaporation emissions from the fuel tank, relevant to petrol vehicles only. \\nNone\\nNon-exhaust emissions are those resulting from tyre, brake and road wear. These emissions are considered as by-products. \\nTechnology:  Transport in a passenger car with internal combustion engine, fueled by petrol. The size is small, with engine size up to 2.0 litres and average weight of 1600 kg.  \\nTechnology classifications are based on those used widely within the works of the European Environment Agency, particularly in the Emissions Inventory Guidebook. The Tremove model - which is also used to generate fuel consumption and emission factors for the datasets presented here - follows this classification system.',\n 'classifications': [('ISIC rev.4 ecoinvent',\n   '4922:Other passenger land transport'),\n  ('CPC', '64119: Other land transportation services of passengers, n.e.c.')],\n 'activity type': 'ordinary transforming activity',\n 'activity': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd',\n 'database': 'ecoinvent_391_cutoff',\n 'filename': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd_3bf68190-17bd-4506-84da-3ef2bcb1b624.spold',\n 'location': 'RER',\n 'name': 'transport, passenger car, medium size, petrol, EURO 3',\n 'synonyms': [],\n 'parameters': [{'description': 'annual total vkm',\n   'id': 'b08278ed-9947-45bf-84fc-45bfc472bd8b',\n   'unit': 'kilometer',\n   'comment': 'Based on Tremove (2009)',\n   'amount': 210326000000.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 26.0719245449185,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'annual_vkm'},\n  {'description': 'co2 emissions per kg petrol',\n   'id': '510bbb41-fb4a-4ed6-8f09-064cb1a92a45',\n   'unit': 'kilogram',\n   'comment': 'Constant for all petrol vehicles',\n   'amount': 3.18,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 1.15688119679209,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'co2_kg_petrol'},\n  {'description': 'emissions from brake friction',\n   'id': '963f7f42-4768-4a18-8d60-669973652be8',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 4.45e-09,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -19.2303617407683,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'brake_wear_emissions'},\n  {'description': 'emissions from road abrasion',\n   'id': '4fe50f59-7759-4db2-8d35-c63314f2deba',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 9.79e-09,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -18.441904380404,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'road_wear_emissions'},\n  {'description': 'emissions from tyre abrasion',\n   'id': 'ca5b7cf8-faad-4893-beab-2f41513db7c4',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 5.725e-08,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -16.6758381945121,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'tyre_wear_emissions'},\n  {'description': 'fuel consumption constant',\n   'id': 'c8f2fb31-30d9-4a68-b879-d0167305d4da',\n   'unit': 'dimensionless',\n   'comment': 'Determined from analysing the fuel consumption for vehicles in the Tremove model (2009)',\n   'amount': 2.9288e-05,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -10.4383326821463,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'fc_constant'},\n  {'description': 'fuel consumption of basis vehicle',\n   'id': 'd69aa7c9-1110-4ec8-a4ad-b5f307fedaf6',\n   'unit': 'dimensionless',\n   'comment': 'Fuel consumption as derived from the source data for each vehicle type, size and emissions standard',\n   'amount': 0.06667,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -2.70800020235217,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'fc_basis_vehicle'},\n  {'description': 'gross vehicle weight',\n   'id': '01dbd027-f8ea-4218-81db-a028439db747',\n   'unit': 'kilogram',\n   'comment': 'Weight of vehicle and passengers',\n   'amount': 1697.2,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.43673511332817,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'gross_vehicle_weight'},\n  {'description': 'lifetime of the vehicle',\n   'id': '297dd1cd-575a-4da8-990f-cbfca6a66d3e',\n   'unit': 'kilometer',\n   'comment': 'Distance capacity in the assumed vehicle lifetime.\\n\\nReference: Spielmann (2007) ecoinvent report 14. Ecoinvent centre, Dübendorf.',\n   'amount': 150000.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 11.9183905730784,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'vehicle_lifetime_km'},\n  {'description': 'passenger load factor',\n   'id': '4ad25793-1808-4e8d-a344-bd7ba8b2ce1f',\n   'unit': 'kilogram',\n   'comment': 'Number of passengers multiplied by 60 kg per passenger',\n   'amount': 97.2,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 4.57677071146639,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'LF_passengers'},\n  {'description': 'passengers',\n   'id': '2722dba2-e390-4b43-994c-eb4c338dcb7b',\n   'unit': 'unit',\n   'comment': 'Average number of passengers in passenger car 1.62',\n   'amount': 1.62,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 0.482426149244293,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'passengers'},\n  {'description': 'scaling factor',\n   'id': '291598b5-efd9-424c-b185-42fa2b1aa8b9',\n   'unit': 'dimensionless',\n   'comment': 'The mass of a vehicle influences a range of different exchanges. These are fuel consumption (and thus fuel dependant emissions), non-exhaust emissions and vehicle and road infrastructures. For the infrastructres a scaling factor is used to extrapolate the values appropriate to the basis vehicle. The scaling factor is given by vehicle weight divided by the basis vehicle weight (1240kg).',\n   'amount': 1.29032258064516,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 0.254892249628789,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'scaling_factor'},\n  {'description': 'so2 emissions per kg petrol',\n   'id': 'e5f70abe-ea97-4348-bfa8-15a784660fda',\n   'unit': 'kilogram',\n   'comment': 'Constant for all petrol vehicles',\n   'amount': 2e-05,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -10.8197782844103,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'so2_kg_petrol'},\n  {'description': 'weight of the basis vehicle',\n   'id': 'cffc5607-d071-4a68-b6fb-b01e7c85290d',\n   'unit': 'kg/unit',\n   'comment': 'The basis vehicle is the one on which the original life cycle inventory was conducted. It is representative of a VW Golf.',\n   'amount': 1240.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.12286665859908,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'basis_vehicle_weight'},\n  {'description': 'weight of the vehicle',\n   'id': '9cd30d63-8c02-47ee-9621-31a92d15bb72',\n   'unit': 'kg/unit',\n   'comment': 'Empty vehicle weight (curb weight) according to each vehicle class used: small cars (<1.4 litres) 1200kg; \\nmedium size cars (1.4 - 2.0 litres) 1600kg; \\nlarge size cars (>2.0 litres) 2000kg',\n   'amount': 1600.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.37775890822787,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'vehicle_weight'}],\n 'authors': {'data entry': {'name': 'Andrew Simons',\n   'email': 'andrew.simons@3sp.ch'},\n  'data generator': {'name': 'Andrew Simons',\n   'email': 'andrew.simons@3sp.ch'}},\n 'type': 'process',\n 'reference product': 'transport, passenger car, medium size, petrol, EURO 3',\n 'flow': '3bf68190-17bd-4506-84da-3ef2bcb1b624',\n 'unit': 'kilometer',\n 'production amount': 1.0,\n 'code': 'f47975feec24d99acfd8fd14ecc84c49',\n 'id': 19682}\n\n\nTo look at the exchanges, you can go throught them with a list:\n\n[ex for ex in example_transport.exchanges()]\n\n[Exchange: 1.0 kilometer 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -7.55254e-06 kilogram 'market for brake wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 8.6021505376344e-06 unit 'maintenance, passenger car' (unit, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0106666666666667 kilogram 'market for passenger car, petrol/natural gas' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0682165984485006 kilogram 'market for petrol, low-sulfur' (kilogram, Europe without Switzerland, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.001300195151499404 kilogram 'market for petrol, low-sulfur' (kilogram, CH, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0009113964 meter-year 'market for road' (meter-year, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.000265427119835466 meter-year 'market for road maintenance' (meter-year, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -1.6615588e-05 kilogram 'market for road wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -9.71647e-05 kilogram 'market for tyre wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.952e-08 kilogram '1-Pentene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.417e-06 kilogram '2-Methylpentane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.013e-07 kilogram 'Acetaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.637e-07 kilogram 'Acetone' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.099e-08 kilogram 'Acrolein' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.085503808e-06 kilogram 'Ammonia' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.904e-08 kilogram 'Benzaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.043e-06 kilogram 'Benzene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.606e-06 kilogram 'Butane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-10 kilogram 'Cadmium II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.221063403648 kilogram 'Carbon dioxide, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.001467 kilogram 'Carbon monoxide, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.47583968e-09 kilogram 'Chromium III' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-12 kilogram 'Chromium VI' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.1817854912e-07 kilogram 'Copper ion' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.059e-07 kilogram 'Cyclohexane (for all cycloalkanes)' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 9.037183168e-06 kilogram 'Dinitrogen monoxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.174e-06 kilogram 'Ethane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.645e-08 kilogram 'Ethylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.959e-06 kilogram 'Ethylene oxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.562e-07 kilogram 'Formaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.986e-07 kilogram 'Heptane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.321e-07 kilogram 'Hexane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.042751904e-10 kilogram 'Lead II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.866175552e-12 kilogram 'Mercury II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.177e-05 kilogram 'Methane, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.342e-08 kilogram 'Methyl ethyl ketone' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.855e-05 kilogram 'NMVOC, non-methane volatile organic compounds' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.866175552e-09 kilogram 'Nickel II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.481e-05 kilogram 'Nitrogen oxides' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.41918441728e-09 kilogram 'PAH, polycyclic aromatic hydrocarbons' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.029e-06 kilogram 'Particulate Matter, < 2.5 um' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 8.745e-06 kilogram 'Pentane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.623e-06 kilogram 'Propane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.481e-07 kilogram 'Propene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.025e-06 kilogram 'Propylene oxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-10 kilogram 'Selenium IV' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.711e-07 kilogram 'Styrene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.390335872e-06 kilogram 'Sulfur dioxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.583e-06 kilogram 'Toluene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-08 kilogram 'Zinc II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.273e-06 kilogram 'm-Xylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.842e-07 kilogram 'o-Xylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>]\n\n\nThis example is good to understand the three types of exchanges:\n\nproduction: for the main output of the activity, the product that is produced with this activity,\ntechnosphere: the inputs from the technosphere, i.e., from other activities in the dtabases in the project,\nbiosphere: the emissions and natural resources of elementary flows, from the biosphere database.\n\nSpecifying the type of exchange is necessary when creating new ones.\nBelow are some examples of exchanges. Here of a production exchange:\n\nlist(example_transport.exchanges())[0].as_dict()\n\n{'flow': '3bf68190-17bd-4506-84da-3ef2bcb1b624',\n 'type': 'production',\n 'name': 'transport, passenger car, medium size, petrol, EURO 3',\n 'classifications': {'CPC': ['64119: Other land transportation services of passengers, n.e.c.']},\n 'production volume': 210326000000.0,\n 'properties': {'carbon allocation': {'amount': 0.0, 'unit': 'kg'},\n  'carbon content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'price': {'amount': 0.1762454815541633,\n   'comment': 'Calculated based on inputs: The price of the product has been calculated as a sum of the values of the material and energy inputs for this product. This value is therefore a rough estimation. It may underestimate the real price since there are additional expenses when producing any product. These expences can include for example labour costs, treatment of waste materials and profit for the producer. Please consider carefully whether this level of data quality is acceptable for your application.',\n   'unit': 'EUR2005'}},\n 'activity': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd',\n 'unit': 'kilometer',\n 'amount': 1.0,\n 'uncertainty type': 0,\n 'loc': 1.0,\n 'input': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}\n\n\nHere of a technosphere exchange:\n\nlist(example_transport.exchanges())[1].as_dict()\n\n{'flow': '5b975ec7-3bbe-46a1-88a0-d475a87a6eab',\n 'type': 'technosphere',\n 'name': 'brake wear emissions, passenger car',\n 'classifications': {'CPC': ['49129: Other parts and accessories n.e.c. of motor vehicles (including brakes, gear boxes, axles, road wheels, suspen[…]']},\n 'production volume': 0.0,\n 'properties': {'carbon allocation': {'amount': 0.0, 'unit': 'kg'},\n  'carbon content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'price': {'amount': 0.0,\n   'comment': 'Waste products are assigned a price of zero as they are assumed to require further treatment.',\n   'unit': 'EUR2005'}},\n 'activity': '4fcfcee4-2e07-5d48-86e9-9e569ff7a3b5',\n 'unit': 'kilogram',\n 'comment': 'Quantity of emissions based on values from Ntziachristos, L., Boulter, P. (2009) EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency. Quantities given in the source assumed to represent medium sized vehicles. Quantities for small and large vehicles taken from the bounds of the ranges given.',\n 'variable name': 'brake_emissions',\n 'formula': 'brake_wear_emissions* gross_vehicle_weight',\n 'amount': -7.55254e-06,\n 'pedigree': {'reliability': 2,\n  'completeness': 2,\n  'temporal correlation': 2,\n  'geographical correlation': 1,\n  'further technological correlation': 1},\n 'uncertainty type': 2,\n 'loc': -11.793626627440092,\n 'scale': 0.03872983346207417,\n 'scale without pedigree': 0.02449489742783178,\n 'input': ('ecoinvent_391_cutoff', 'ca8816e4f3b0da5483a65d625084b13a'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}\n\n\nAnd here of a biosphere exchange:\n\nlist(example_transport.exchanges())[10].as_dict()\n\n{'flow': '8cbaa905-41b0-4327-8403-bf1c8eb25429',\n 'type': 'biosphere',\n 'name': '1-Pentene',\n 'classifications': {'CPC': []},\n 'production volume': 0.0,\n 'properties': {'carbon allocation': {'amount': 0.856284505178628,\n   'unit': 'kg'},\n  'carbon content': {'amount': 0.856284505178628, 'unit': 'dimensionless'},\n  'carbon content, fossil': {'amount': 0.856284505178628,\n   'unit': 'dimensionless'},\n  'carbon content, non-fossil': {'amount': 0.0, 'unit': 'dimensionless'},\n  'dry mass': {'amount': 1.0, 'unit': 'kg'},\n  'water content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'water in wet mass': {'amount': 0.0, 'unit': 'kg'},\n  'wet mass': {'amount': 1.0, 'unit': 'kg'}},\n 'unit': 'kilogram',\n 'comment': 'Emissions dependent on engine Euro class (Euro 3, Euro 4 and Euro 5).',\n 'amount': 2.952e-08,\n 'pedigree': {'reliability': 2,\n  'completeness': 2,\n  'temporal correlation': 5,\n  'geographical correlation': 1,\n  'further technological correlation': 1},\n 'uncertainty type': 2,\n 'loc': -17.33819783721414,\n 'scale': 0.20322401432901577,\n 'scale without pedigree': 0.02449489742783178,\n 'input': ('biosphere3', '8cbaa905-41b0-4327-8403-bf1c8eb25429'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#create-the-database",
    "href": "resources/brightway_seminar_solution.html#create-the-database",
    "title": "Welcome!",
    "section": "Create the database",
    "text": "Create the database\nAs errors can happen but as everything is available to re-write the database, it is convenient sometimes to re-start from zero. Here is a function to delete a database if it exists in the current project:\n\ndef reset_brightway_database(db_name):\n    if db_name in bd.databases:\n        del bd.databases[db_name]\n\nTo create a new database, create a database “object” with a name, and then save it on your computer with register:\n\nname_motor_db = \"motor_case\"\nreset_brightway_database(name_motor_db)\nmotor_db = bd.Database(name_motor_db)\nmotor_db.register()\n\nLet’s check that it was created:\n\nbd.databases\n\nDatabases dictionary with 3 object(s):\n    biosphere3\n    ecoinvent_391_cutoff\n    motor_case"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#add-activities",
    "href": "resources/brightway_seminar_solution.html#add-activities",
    "title": "Welcome!",
    "section": "Add activities",
    "text": "Add activities\nAs for databases, it is convenient to be able to delete an activity to re-start from zero. Here is a function for that:\n\ndef reset_activity(act_name, database=motor_db):\n    for activity in [act for act in motor_db if act['name']==act_name]:\n        activity.delete()\n\nIn a database saved as a database “object” database_object, a new activity is created with the function new_activityand then saved on your computer with save().\nAn activity needs necessarily:\n\nA name,\nA unique code, i.e., you can have several activities with the same name, but the computer needs a different code to distinguish them,\nA unit.\n\n\n# act_motor_production = motor_db.new_activity(\n#     name = \"motor production\",\n#     code = \"motor production\",\n#     unit = \"unit\",\n#     location = \"GLO\"\n# )\n# act_motor_production.save()\n\nThen, exchanges can be added with the function new_exchange and save()to store it on your computer. The necessary information for an exchange are:\n\nAn input, i.e., the activity from which the input comes from, or the activity in the biosphere database for an input/output of elementary flow,\nAn amount (the unit is defined by the input),\nA type of exchange, i.e., production, technosphere or biosphere.\n\nYou can have several exchanges from the same input, with the same value, so it can happen that you add the same exchange twice. To avoid that, here is a function that:\n\nDelete the activity if it exists,\nCreate an activity with a code that is the same as the name,\nAdd technosphere exchanges based on a list of (input, amount).\n\nThat will be enough for us in this example.\n\ndef create_new_activity(act_name, unit, exchanges, database=motor_db):\n    reset_activity(act_name, database)\n    act_new = motor_db.new_activity(\n        name = act_name,\n        code = act_name,\n        unit = unit\n    )\n    act_new.save()\n    for input, amount in exchanges:\n        act_new.new_exchange(\n            input = input,\n            amount = amount,\n            type = \"technosphere\"\n        ).save()\n    act_new.save()\n\nInputs from ecoinvent\nFirst, let get the necessary activities from ecoinvent:\n\nact_steel_unalloyed = ei_db.get(name=\"market for steel, unalloyed\", location=\"GLO\")\n\n\nact_steel_low_alloyed = ei_db.get(name=\"market for steel, low-alloyed\", location=\"GLO\")\n\n\nact_copper = ei_db.get(name=\"market for copper, cathode\", location=\"GLO\")\n\n\nact_insulation = ei_db.get(name=\"market for epoxy resin, liquid\", location=\"RER\")\n\n\nact_elec = ei_db.get(name=\"market for electricity, high voltage\", location=\"SE\")\n\n\nact_incineration_insulation = ei_db.get(name=\"treatment of waste plastic, mixture, municipal incineration with fly ash extraction\", location=\"CH\", unit=\"kilogram\")\n\n\nact_incineration_copper = ei_db.get(name=\"treatment of copper in car shredder residue, municipal incineration with fly ash extraction\", location=\"CH\")\n\nParameters\nThen the value of different parameters useful to create the activities.\n\nqt_steel_unalloyed = 26600 #kg\nqt_steel_low_alloyed = 4100 #kg\nqt_copper = 3600 #kg\nqt_insulation = 400 #kg\nweight_motor = qt_steel_unalloyed + qt_steel_low_alloyed + qt_copper + qt_insulation\noutput_power = 16000 #kW\nop_hours = 8400 #hours per year\nlifetime = 20 #years\nefficiency = 0.973\n\nActivities creation\nWith our own function create_new_activity, creating an activity looks like that:\n\ndef create_motor_production(qt_steel_unalloyed=qt_steel_unalloyed, qt_steel_low_alloyed=qt_steel_low_alloyed, qt_copper=qt_copper, qt_insulation=qt_insulation):\n    create_new_activity(\n        \"motor production\",\n        \"unit\",\n        [\n            (act_steel_unalloyed, qt_steel_unalloyed),\n            (act_steel_low_alloyed, qt_steel_low_alloyed),\n            (act_copper, qt_copper),\n            (act_insulation, qt_insulation),\n            (act_elec, 3600)\n        ]\n    )\n\nWhen activity creation is scattered in the code, it is practical to turn it as functions. When each activity creation is under a function, a last function can call all of them in the right order. Then, you are sure that all your created database is updated.\nIn the creation functions, you can also add input parameters to be able to change them quickly.\nLet’s do this for all activities in the life cycle of a motor.\n\ndef create_motor_testing():\n    create_new_activity(\n        \"motor testing\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor production\"), 1),\n            (act_elec, 16000)\n        ]\n    )\n\n\ndef create_motor_use(lifetime=lifetime, efficiency=efficiency):\n    create_new_activity(\n        \"motor use\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor testing\"), 1),\n            (act_elec, output_power*op_hours*lifetime*(1/efficiency-1))\n        ]\n    )\n\n\ndef create_motor_treatment(weight_motor=weight_motor, qt_insulation=qt_insulation, qt_copper=qt_copper):\n    create_new_activity(\n        \"motor EoL treatment\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor use\"), 1),\n            (act_elec, 0.041*weight_motor),\n            (act_incineration_insulation, -qt_insulation),\n            (act_incineration_copper, -0.04*qt_copper)\n        ]\n    )\n\nAnd now a function to call all the functions which creates activities:\n\ndef create_motor_system(\n    qt_steel_unalloyed=qt_steel_unalloyed, \n    qt_steel_low_alloyed=qt_steel_low_alloyed, \n    qt_copper=qt_copper, \n    qt_insulation=qt_insulation, \n    lifetime=lifetime, \n    efficiency=efficiency, \n    weight_motor=weight_motor\n):\n    create_motor_production(qt_steel_unalloyed=qt_steel_unalloyed, qt_steel_low_alloyed=qt_steel_low_alloyed, qt_copper=qt_copper, qt_insulation=qt_insulation)\n    create_motor_testing()\n    create_motor_use(lifetime=lifetime, efficiency=efficiency)\n    create_motor_treatment(weight_motor=weight_motor, qt_insulation=qt_insulation, qt_copper=qt_copper)\n\n\ncreate_motor_system()\n\nTo check the activities in the database:\n\n[act for act in motor_db]\n\n['motor use' (unit, GLO, None),\n 'motor EoL treatment' (unit, GLO, None),\n 'motor testing' (unit, GLO, None),\n 'motor production' (unit, GLO, None)]"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#selection-of-impact-assessment-methods",
    "href": "resources/brightway_seminar_solution.html#selection-of-impact-assessment-methods",
    "title": "Welcome!",
    "section": "Selection of impact assessment methods",
    "text": "Selection of impact assessment methods\nImpact assessment methods have been imported with the biosphere database. The list of all available methods is accessible with:\n\nbd.methods\n\nMethods dictionary with 762 objects, including:\n    ('CML v4.8 2016', 'acidification', 'acidification (incl. fate, average Europe total, A&B)')\n    ('CML v4.8 2016', 'climate change', 'global warming potential (GWP100)')\n    ('CML v4.8 2016', 'ecotoxicity: freshwater', 'freshwater aquatic ecotoxicity (FAETP inf)')\n    ('CML v4.8 2016', 'ecotoxicity: marine', 'marine aquatic ecotoxicity (MAETP inf)')\n    ('CML v4.8 2016', 'ecotoxicity: terrestrial', 'terrestrial ecotoxicity (TETP inf)')\n    ('CML v4.8 2016', 'energy resources: non-renewable', 'abiotic depletion potential (ADP): fossil fuels')\n    ('CML v4.8 2016', 'eutrophication', 'eutrophication (fate not incl.)')\n    ('CML v4.8 2016', 'human toxicity', 'human toxicity (HTP inf)')\n    ('CML v4.8 2016', 'material resources: metals/minerals', 'abiotic depletion potential (ADP): elements (ultimate reserves)')\n    ('CML v4.8 2016', 'ozone depletion', 'ozone layer depletion (ODP steady state)')\nUse `list(this object)` to get the complete list.\n\n\nFor searching in the list of methods, use conditions in the list:\n\n[method for method in bd.methods if \"climate change\" in str(method) and \"EF v3.1\" in str(method)]\n\n[('EF v3.1 no LT',\n  'climate change no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: biogenic no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: fossil no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: land use and land use change no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1', 'climate change', 'global warming potential (GWP100)'),\n ('EF v3.1', 'climate change: biogenic', 'global warming potential (GWP100)'),\n ('EF v3.1', 'climate change: fossil', 'global warming potential (GWP100)'),\n ('EF v3.1',\n  'climate change: land use and land use change',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804', 'climate change', 'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: biogenic',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: fossil',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: land use and land use change',\n  'global warming potential (GWP100)')]\n\n\nMethods can be selected when knowing the tuple for their name:\n\ngw_method = ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n\nOr by selecting the items in a list:\n\ncsi_method = [method for method in bd.methods if \"Crustal\" in str(method)][0]"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#impact-assessment",
    "href": "resources/brightway_seminar_solution.html#impact-assessment",
    "title": "Welcome!",
    "section": "Impact assessment",
    "text": "Impact assessment\nThe impact assessment is divided in several steps. First, the functional unit is defined as a dictionary {activity: amount}.\n\nfunctional_unit = {motor_db.get(\"motor EoL treatment\"): 1/lifetime}\n\nThen an LCA “object” is created by specifying the functional unit and the impact assessment method (only one):\n\nlca = bc.LCA(demand=functional_unit, method=gw_method)\n\nThe inventory is calculated:\n\nlca.lci()\n\nAnd finally the impact assessment:\n\nlca.lcia()\n\nThe score can be accessed with:\n\nlca.score\n\n126133.21969201368\n\n\nAnd the method can be accessed with lca.method. So here is the score with the unit:\n\nprint(\"{:.2e}\".format(lca.score) + \" \" + bd.methods.get(lca.method)[\"unit\"])\n\n1.26e+05 kg CO2-Eq\n\n\nTo calculate another impact category, use:\n\nlca.switch_method(csi_method)\n\nThe inventory does not need to be recalculated. Only the impact assessment:\n\nlca.lcia()\n\n\nprint(\"{:.2e}\".format(lca.score) + \" \" + bd.methods.get(lca.method)[\"unit\"])\n\n1.26e+05 kg CO2-Eq\n\n\nHere is a function to calculate the impact for several impact categories and return the results in a table:\n\ndef lca_results(fu, list_methods):\n    list_units = [bd.methods.get(method)[\"unit\"] for method in list_methods]\n    lca = bc.LCA(demand=fu, method=list_methods[0])\n    lca.lci()\n    lca.lcia()\n    list_scores = [lca.score]\n    for method in list_methods[1:]:\n        lca.switch_method(method)\n        lca.lcia()\n        list_scores.append(lca.score)\n    return pd.DataFrame({\"score\": list_scores, \"unit\": list_units, \"method\": list_methods})\n\nHere is a test:\n\nfunctional_unit = {motor_db.get(\"motor EoL treatment\"): 1/lifetime}\nlca_results(functional_unit, [gw_method, csi_method])\n\n\n\n\n\n  \n    \n      \n      score\n      unit\n      method\n    \n  \n  \n    \n      0\n      1.261332e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n    \n    \n      1\n      2.419240e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res..."
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#basic-contribution-analysis",
    "href": "resources/brightway_seminar_solution.html#basic-contribution-analysis",
    "title": "Welcome!",
    "section": "Basic contribution analysis",
    "text": "Basic contribution analysis\nBrightway provides functions for contribution analysis with the top processes:\n\nbwa.ContributionAnalysis().annotated_top_processes(lca, limit = 5)\n#(lca score, supply amount, activity name)\n\n[(19589.71312008136,\n  6023.106284064705,\n  'treatment of blast furnace gas, in power plant' (kilowatt hour, SE, None)),\n (13829.050334679665,\n  310709.31328500307,\n  'electricity production, hydro, reservoir, non-alpine region' (kilowatt hour, SE, None)),\n (6482.820413308244,\n  5469.66345635338,\n  'electricity production, lignite' (kilowatt hour, DE, None)),\n (5359.031914767668,\n  4911.163637622725,\n  'heat and power co-generation, hard coal' (kilowatt hour, SE, None)),\n (5288.868591922492,\n  3874629.1029527863,\n  'market for electricity, high voltage' (kilowatt hour, SE, None))]\n\n\nAnd with the top contributing elementary flows:\n\nbwa.ContributionAnalysis().annotated_top_emissions(lca, limit=0.1, limit_type=\"percent\")\n\n[(8086238.68038977,\n  36.75563036540805,\n  'Uranium' (kilogram, None, ('natural resource', 'in ground'))),\n (3326223.0710267425,\n  18479.017061259685,\n  'Coal, hard, unspecified' (kilogram, None, ('natural resource', 'in ground')))]\n\n\nThe cut-off can be expressed in terms of number of processes/flows or in terms of percentages."
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#customised-contribution-analysis",
    "href": "resources/brightway_seminar_solution.html#customised-contribution-analysis",
    "title": "Welcome!",
    "section": "Customised contribution analysis",
    "text": "Customised contribution analysis\nHere I provide functions for contribution analysis for the processes in the created database:\n\ndef table_recursive_multi_calculation_dbparent_cut(activity, lcia_methods, amount=1, level=0, max_level=3, db_parent=None, db_cut=['ecoinvent'], act_parent={\"name\": None}):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain sub-activities if the activity is from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, activity parent, database parent, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], act_parent[\"name\"], db_parent]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"activity parent\", \"database parent\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        db_parent = activity['database']\n        go_forward = True\n        for stop_word in db_cut:\n            if stop_word in db_parent:\n                go_forward = False\n        if go_forward:\n            for exc in activity.technosphere():\n                table = pd.concat([table, table_recursive_multi_calculation_dbparent_cut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_parent = db_parent,\n                    act_parent = activity\n                )], ignore_index=True)\n    return table\n\n\ndef table_recursive_multi_calculation_dbcut(activity, lcia_methods, amount=1, level=0, max_level=3, db_activity='motor_case', db_cut=['ecoinvent', 'biosphere']):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain activities if they are from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, database, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], db_activity]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"database\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        for exc in activity.technosphere():\n            db_exc = exc.input['database']\n            go_forward = True\n            for stop_word in db_cut:\n                if stop_word in db_exc:\n                    go_forward = False\n            if go_forward:\n                table = pd.concat([table, table_recursive_multi_calculation_dbcut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_activity = db_exc\n                )], ignore_index=True)\n    return table\n\n\ntable_recursive_multi_calculation_dbcut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\n\n\n\n  \n    \n      \n      level\n      activity\n      database\n      ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n      ('Crustal Scarcity Indicator 2020', 'material resources: metals/minerals', 'crustal scarcity potential (CSP)')\n    \n  \n  \n    \n      0\n      0\n      motor EoL treatment\n      motor_case\n      152106.850012\n      3.135959e+07\n    \n    \n      1\n      1\n      motor use\n      motor_case\n      152050.853441\n      3.135912e+07\n    \n    \n      2\n      2\n      motor testing\n      motor_case\n      4628.080466\n      9.496619e+06\n    \n    \n      3\n      3\n      motor production\n      motor_case\n      4601.927814\n      9.492741e+06\n    \n  \n\n\n\n\n\ntable_recursive_multi_calculation_dbparent_cut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\n\n\n\n  \n    \n      \n      level\n      activity\n      activity parent\n      database parent\n      ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n      ('Crustal Scarcity Indicator 2020', 'material resources: metals/minerals', 'crustal scarcity potential (CSP)')\n    \n  \n  \n    \n      0\n      0\n      motor EoL treatment\n      None\n      None\n      126133.219692\n      2.419240e+07\n    \n    \n      1\n      1\n      motor use\n      motor EoL treatment\n      motor_case\n      126083.220046\n      2.419194e+07\n    \n    \n      2\n      2\n      motor testing\n      motor use\n      motor_case\n      4162.943978\n      6.111411e+06\n    \n    \n      3\n      3\n      motor production\n      motor testing\n      motor_case\n      4136.791326\n      6.107533e+06\n    \n    \n      4\n      3\n      market for electricity, high voltage\n      motor testing\n      motor_case\n      26.152652\n      3.878385e+03\n    \n    \n      5\n      2\n      market for electricity, high voltage\n      motor use\n      motor_case\n      121920.276162\n      1.808053e+07\n    \n    \n      6\n      1\n      market for electricity, high voltage\n      motor EoL treatment\n      motor_case\n      2.325461\n      3.448611e+02\n    \n    \n      7\n      1\n      treatment of waste plastic, mixture, municipal...\n      motor EoL treatment\n      motor_case\n      47.394643\n      7.412927e+01\n    \n    \n      8\n      1\n      treatment of copper in car shredder residue, m...\n      motor EoL treatment\n      motor_case\n      0.279543\n      3.811270e+01"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#figures",
    "href": "resources/brightway_seminar_solution.html#figures",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\nHere is a way to generate a box plot figure.\n\nown_colors = {\n    \"motor production\":\"#1f78b4\", #blue\n    \"motor use\":\"#969696\", #gray\n    \"motor EoL treatment\": \"#41ae76\", #green\n    \"motor testing\":\"#fff7bc\" #yellow\n}\n\n\ntable_results = table_recursive_multi_calculation_dbcut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\ndef basic_bar_chart(table_results, legend_x_axis, own_colors=own_colors):\n    table_figure = table_results.set_index(table_results[\"activity\"])\n    number_methods = table_figure.shape[1] - 3\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [0]\n\n    for n_fig, method in enumerate(table_figure.columns[3:]):\n        for activity in table_figure.index:\n            if n_fig == 0:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    label=activity, \n                    color=own_colors[activity]\n                )\n            else:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    color=own_colors[activity]\n                )\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels([legend_x_axis[n_fig]], fontsize=14)\n    \n    fig.legend(loc='lower center', ncol=5)\n    plt.subplots_adjust(bottom=0.15)\n    \n    return plt.show()\n\n\nbasic_bar_chart(\n    table_results,\n    [\"GW\", \"CSI\"]\n)"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#data",
    "href": "resources/brightway_seminar_solution.html#data",
    "title": "Welcome!",
    "section": "Data",
    "text": "Data\n\ndata_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600, #kg\n    \"qt_insulation\": 400, #kg\n    \"weight_motor\": 26600+4100+3600+400, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800, #kg\n    \"qt_insulation\": 300, #kg\n    \"weight_motor\": 18000+9200+3800+300, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.9835\n}\n\n\ndata_repair_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600*1.5, #kg\n    \"qt_insulation\": 400*1.5, #kg\n    \"weight_motor\": 26600+4100+3600*1.5+400*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_repair_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800*1.5, #kg\n    \"qt_insulation\": 300*1.5, #kg\n    \"weight_motor\": 18000+9200+3800*1.5+300*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.9835\n}"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#generation-of-results",
    "href": "resources/brightway_seminar_solution.html#generation-of-results",
    "title": "Welcome!",
    "section": "Generation of results",
    "text": "Generation of results\n\ndict_scenarios = {\n    \"low efficiency\": data_low_efficiency, \n    \"high efficiency\": data_high_efficiency, \n    \"repair low efficiency\": data_repair_low_efficiency, \n    \"repair high efficiency\": data_repair_high_efficiency\n}\n\n\ndef return_table_results_scenarios(dict_scenarios, methods=[gw_method, csi_method]):\n    results_table = pd.DataFrame()\n    for name, data in dict_scenarios.items():\n        create_motor_system(**data)\n        functional_unit = {motor_db.get(\"motor EoL treatment\"): 1/data[\"lifetime\"]}\n        results_table_scenario = lca_results(functional_unit, methods)\n        results_table_scenario[\"scenario\"] = name\n        results_table = pd.concat([results_table, results_table_scenario], ignore_index=True)\n    return results_table\n\n\ntable_results_scenarios = return_table_results_scenarios(dict_scenarios)\n\n\ntable_results_scenarios\n\n\n\n\n\n  \n    \n      \n      score\n      unit\n      method\n      scenario\n    \n  \n  \n    \n      0\n      1.261332e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      low efficiency\n    \n    \n      1\n      2.419240e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      low efficiency\n    \n    \n      2\n      7.768786e+04\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      high efficiency\n    \n    \n      3\n      1.736572e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      high efficiency\n    \n    \n      4\n      1.243726e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      repair low efficiency\n    \n    \n      5\n      2.258877e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      repair low efficiency\n    \n    \n      6\n      7.605343e+04\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      repair high efficiency\n    \n    \n      7\n      1.567980e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      repair high efficiency"
  },
  {
    "objectID": "resources/brightway_seminar_solution.html#figures-1",
    "href": "resources/brightway_seminar_solution.html#figures-1",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\n\ndef figure_comparison_scenarios(table_results_scenarios, legend_x_axis):\n    number_methods = 2\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [i for i in range(len(dict_scenarios))]\n\n    for index in table_results_scenarios.index:\n        ax[index%2].bar(x_axis[index//2], table_results_scenarios.loc[index, \"score\"])\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels(legend_x_axis, rotation=90)\n        ax[n_fig].set_ylabel(table_results_scenarios.loc[n_fig, \"unit\"])\n\n    plt.subplots_adjust(wspace=0.3)\n    \n    return plt.show()\n\n\nfigure_comparison_scenarios(table_results_scenarios, list(dict_scenarios.keys()))"
  },
  {
    "objectID": "seminar_brightway.html#slides",
    "href": "seminar_brightway.html#slides",
    "title": "Code-along with Brightway",
    "section": "Slides",
    "text": "Slides\n\n\n\n\nLink to the slides"
  },
  {
    "objectID": "seminar_brightway.html#notebooks",
    "href": "seminar_brightway.html#notebooks",
    "title": "Code-along with Brightway",
    "section": "Notebooks",
    "text": "Notebooks\nFor this seminar, the participants write and run code one Jupyter notebooks. These notebooks are available below.\n\nDownload the notebook for doing a first LCA with brightway\n\n\nDownload the notebook with Python basics\n\n\nDownload the notebook solution for doing a first LCA with brightway"
  },
  {
    "objectID": "docs/resources/basics_of_python.html",
    "href": "docs/resources/basics_of_python.html",
    "title": "Welcome!",
    "section": "",
    "text": "Here are some Python basics to understand coding with brightway."
  },
  {
    "objectID": "docs/resources/basics_of_python.html#lists",
    "href": "docs/resources/basics_of_python.html#lists",
    "title": "Welcome!",
    "section": "Lists",
    "text": "Lists\nGroup of objects with an order, indexed by consecutive integers (starting at 0)\n\nlist_1 = [\"a\", \"b\", \"c\", \"d\"]\nlist_1\n\n['a', 'b', 'c', 'd']\n\n\n\n# acces the object in position 2\nlist_1[2]\n\n'c'\n\n\n\n# List length\nlen(list_1)\n\n4\n\n\n\n# We can modify a specific element in the list\nlist_1[0]=\"foo\"\nprint(list_1)\n\n# Add an element at the end of the list\nlist_1.append(\"bar\")\nprint(list_1)\n\n# Remove one element\ndel list_1[1]\nprint(list_1)\n\n['foo', 'b', 'c', 'd']\n['foo', 'b', 'c', 'd', 'bar']\n['foo', 'c', 'd', 'bar']\n\n\n\n# We can concatenate lists\n[\"a\", \"b\"] + [1, 2]\n\n['a', 'b', 1, 2]"
  },
  {
    "objectID": "docs/resources/basics_of_python.html#tuples",
    "href": "docs/resources/basics_of_python.html#tuples",
    "title": "Welcome!",
    "section": "Tuples",
    "text": "Tuples\nTuples are groups of objects, ordered, but they cannot be changed (used, e.g., for coordinates).\n\na=(1, 2, 3)\na[1]\n\n2\n\n\n\n# test of changing a value\na[1] = 4\n\nTypeError: 'tuple' object does not support item assignment"
  },
  {
    "objectID": "docs/resources/basics_of_python.html#dictionaries",
    "href": "docs/resources/basics_of_python.html#dictionaries",
    "title": "Welcome!",
    "section": "Dictionaries",
    "text": "Dictionaries\nA group of objects without order, with a key and a definition, indexed by the keys.\n\ndic1 = {\"key 1\": 1, \"key 2\": [\"a\", 0]}\n\n\n# Add a value \ndic1[\"other key\"] = 4\nprint(dic1)\n\n# Modify a value \ndic1[\"key 1\"] = 5\nprint(dic1)\n\n# Remove a value\ndel dic1[\"key 2\"]\nprint(dic1)\n\n{'key 1': 1, 'key 2': ['a', 0], 'other key': 4}\n{'key 1': 5, 'key 2': ['a', 0], 'other key': 4}\n{'key 1': 5, 'other key': 4}\n\n\n\n# List of keys\nprint(dic1.keys())\n\n# List of values\nprint(dic1.values())\n\n# Lists of key-value pairs\nprint(dic1.items())\n\ndict_keys(['key 1', 'other key'])\ndict_values([5, 4])\ndict_items([('key 1', 5), ('other key', 4)])"
  },
  {
    "objectID": "docs/resources/basics_of_python.html#conditional-structure-if",
    "href": "docs/resources/basics_of_python.html#conditional-structure-if",
    "title": "Welcome!",
    "section": "Conditional structure (if)",
    "text": "Conditional structure (if)\nTypical commands : if.. then:.. else allows one or other block to be executed depending on a condition.\n\na=2\n\nif a%2 == 0 :\n    print(\"A is even (We are in the block 'then')\")    \nelse :\n    print(\"A is odd (We are in the block 'else')\")\n\n# No indentation : we are in the common code block\nprint(\"Common code\")\n\nA is even (We are in the block 'then')\nCommon code"
  },
  {
    "objectID": "docs/resources/basics_of_python.html#for-loop",
    "href": "docs/resources/basics_of_python.html#for-loop",
    "title": "Welcome!",
    "section": "“for” loop",
    "text": "“for” loop\n“for” loop allows the repetition of a code block for all elements over a given sequence.\n\na = [\"a\", \"b\", \"c\"]\n\nfor count, element in enumerate(a):\n    print(\"Element: %s, count:%d\" % (element, count))\n\nElement: a, count:0\nElement: b, count:1\nElement: c, count:2\n\n\n\nfor i in range(3):\n    print(i)\n\n0\n1\n2\n\n\n\n# Loop on a dictionary\ndic = {\"key 1\": 2, \"key 2\": 5}\n\nfor key, val in dic.items() :\n    print(\"Key: %s, val: %d\" % (key, val))\n\nKey: key 1, val: 2\nKey: key 2, val: 5"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html",
    "href": "docs/resources/brightway_seminar.html",
    "title": "Welcome!",
    "section": "",
    "text": "This notebook has been developed for a code-along introductory seminar on using brightway. You can a more complete guide on brightway here.\nMore information on the seminars can be found here."
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#import-the-biosphere-database",
    "href": "docs/resources/brightway_seminar.html#import-the-biosphere-database",
    "title": "Welcome!",
    "section": "Import the “biosphere” database",
    "text": "Import the “biosphere” database\n\nbi.bw2setup()\n\nSave the biosphere database as biosphere_db."
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#import-ecoinvent",
    "href": "docs/resources/brightway_seminar.html#import-ecoinvent",
    "title": "Welcome!",
    "section": "Import ecoinvent",
    "text": "Import ecoinvent\nWhen the biosphere database is imported, the ecoinvent database can be imported as well. The importer uses the folder “datasets” from the extracted files of the .7z file which can be fount on the ecoinvent website. Report the path of this folder below.\n!!! Be careful that the path is with “/” instead of “\\”\n\npath_datasets = \"C:/Users/jeromea/Downloads/ecoinvent_3.9.1_cutoff_ecoSpold02/datasets\"\n\nThe name of the imported database will be:\n\nei_db_name = \"ecoinvent_391_cutoff\"\n\nAfter checking that the same database is not imported twice, the import is done is several steps:\n\nFirst, all the datasets are loaded with bi.SingleOutputEcospold2Importer,\nThen, the data are changed based on several “strategies” which are functions to modify the data,\nYou can check that things went well with statistics(), especially that there is “0 unlinked exchanges”\nFinally, the database, for now only in the memory for your python session, is saved to your computer with write_database()\n\n\nif ei_db_name in bd.databases:\n    print(\"Database has already been imported.\")\nelse:\n    ei_importer = bi.SingleOutputEcospold2Importer(path_datasets, ei_db_name)\n    ei_importer.apply_strategies()\n    ei_importer.statistics() \n    ei_importer.write_database()\n\nDatabase has already been imported.\n\n\nYou can see all the metadata (i.e., the properties for describing the database) of the imported database with:\nSave the ecoinvent database as ei_db:"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#accessing-activities-and-flows",
    "href": "docs/resources/brightway_seminar.html#accessing-activities-and-flows",
    "title": "Welcome!",
    "section": "Accessing activities and flows",
    "text": "Accessing activities and flows\nTo search for activities in a database:\nTo return (or “get”) a specific activity object:\nTo look at all information stored in the activity:\nTo look at the exchanges:"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#create-the-database",
    "href": "docs/resources/brightway_seminar.html#create-the-database",
    "title": "Welcome!",
    "section": "Create the database",
    "text": "Create the database\nFunction to delete a database if it exists in the current project:\n\ndef reset_brightway_database(db_name):\n    if db_name in bd.databases:\n        del bd.databases[db_name]\n\nCreate a new database:\nLet’s check that it was created:"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#add-activities",
    "href": "docs/resources/brightway_seminar.html#add-activities",
    "title": "Welcome!",
    "section": "Add activities",
    "text": "Add activities\nFunction to delete an activity:\n\ndef reset_activity(act_name, database=motor_db):\n    for activity in [act for act in motor_db if act['name']==act_name]:\n        activity.delete()\n\nNameError: name 'motor_db' is not defined\n\n\nCreate an activity:\nCreate an exchange:\nInputs from ecoinvent\nFirst, let get the necessary activities from ecoinvent:\n\nact_steel_low_alloyed = ei_db.get(name=\"market for steel, low-alloyed\", location=\"GLO\")\n\n\nact_copper = ei_db.get(name=\"market for copper, cathode\", location=\"GLO\")\n\n\nact_insulation = ei_db.get(name=\"market for epoxy resin, liquid\", location=\"RER\")\n\n\nact_elec = ei_db.get(name=\"market for electricity, high voltage\", location=\"SE\")\n\n\nact_incineration_insulation = ei_db.get(name=\"treatment of waste plastic, mixture, municipal incineration with fly ash extraction\", location=\"CH\", unit=\"kilogram\")\n\n\nact_incineration_copper = ei_db.get(name=\"treatment of copper in car shredder residue, municipal incineration with fly ash extraction\", location=\"CH\")\n\nParameters\nThen the value of different parameters useful to create the activities.\n\nqt_steel_unalloyed = 26600 #kg\nqt_steel_low_alloyed = 4100 #kg\nqt_copper = 3600 #kg\nqt_insulation = 400 #kg\nweight_motor = qt_steel_unalloyed + qt_steel_low_alloyed + qt_copper + qt_insulation\noutput_power = 16000 #kW\nop_hours = 8400 #hours per year\nlifetime = 20 #years\nefficiency = 0.973\n\nActivities creation"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#selection-of-impact-assessment-methods",
    "href": "docs/resources/brightway_seminar.html#selection-of-impact-assessment-methods",
    "title": "Welcome!",
    "section": "Selection of impact assessment methods",
    "text": "Selection of impact assessment methods\nList of all available methods:\nFor searching in the list of methods, use conditions in the list:\nMethods can be selected when knowing the tuple for their name:\nOr by selecting the items in a list:"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#impact-assessment",
    "href": "docs/resources/brightway_seminar.html#impact-assessment",
    "title": "Welcome!",
    "section": "Impact assessment",
    "text": "Impact assessment\nCalculate another impact category:\nHere is a function to calculate the impact for several impact categories and return the results in a table:\n\ndef lca_results(fu, list_methods):\n    list_units = [bd.methods.get(method)[\"unit\"] for method in list_methods]\n    lca = bc.LCA(demand=fu, method=list_methods[0])\n    lca.lci()\n    lca.lcia()\n    list_scores = [lca.score]\n    for method in list_methods[1:]:\n        lca.switch_method(method)\n        lca.lcia()\n        list_scores.append(lca.score)\n    return pd.DataFrame({\"score\": list_scores, \"unit\": list_units, \"method\": list_methods})"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#basic-contribution-analysis",
    "href": "docs/resources/brightway_seminar.html#basic-contribution-analysis",
    "title": "Welcome!",
    "section": "Basic contribution analysis",
    "text": "Basic contribution analysis\nBrightway provides functions for contribution analysis with the top processes:\nAnd with the top contributing elementary flows:"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#customised-contribution-analysis",
    "href": "docs/resources/brightway_seminar.html#customised-contribution-analysis",
    "title": "Welcome!",
    "section": "Customised contribution analysis",
    "text": "Customised contribution analysis\nHere I provide functions for contribution analysis for the processes in the created database:\n\ndef table_recursive_multi_calculation_dbparent_cut(activity, lcia_methods, amount=1, level=0, max_level=3, db_parent=None, db_cut=['ecoinvent'], act_parent={\"name\": None}):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain sub-activities if the activity is from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, activity parent, database parent, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], act_parent[\"name\"], db_parent]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"activity parent\", \"database parent\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        db_parent = activity['database']\n        go_forward = True\n        for stop_word in db_cut:\n            if stop_word in db_parent:\n                go_forward = False\n        if go_forward:\n            for exc in activity.technosphere():\n                table = pd.concat([table, table_recursive_multi_calculation_dbparent_cut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_parent = db_parent,\n                    act_parent = activity\n                )], ignore_index=True)\n    return table\n\n\ndef table_recursive_multi_calculation_dbcut(activity, lcia_methods, amount=1, level=0, max_level=3, db_activity='motor_case', db_cut=['ecoinvent', 'biosphere']):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain activities if they are from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, database, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], db_activity]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"database\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        for exc in activity.technosphere():\n            db_exc = exc.input['database']\n            go_forward = True\n            for stop_word in db_cut:\n                if stop_word in db_exc:\n                    go_forward = False\n            if go_forward:\n                table = pd.concat([table, table_recursive_multi_calculation_dbcut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_activity = db_exc\n                )], ignore_index=True)\n    return table"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#figures",
    "href": "docs/resources/brightway_seminar.html#figures",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\nHere is a way to generate a box plot figure.\n\nown_colors = {\n    \"motor production\":\"#1f78b4\", #blue\n    \"motor use\":\"#969696\", #gray\n    \"motor EoL treatment\": \"#41ae76\", #green\n    \"motor testing\":\"#fff7bc\" #yellow\n}\n\n\ntable_results = \n\n\ndef basic_bar_chart(table_results, legend_x_axis, own_colors=own_colors):\n    table_figure = table_results.set_index(table_results[\"activity\"])\n    number_methods = table_figure.shape[1] - 3\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [0]\n\n    for n_fig, method in enumerate(table_figure.columns[3:]):\n        for activity in table_figure.index:\n            if n_fig == 0:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    label=activity, \n                    color=own_colors[activity]\n                )\n            else:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    color=own_colors[activity]\n                )\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels([legend_x_axis[n_fig]], fontsize=14)\n    \n    fig.legend(loc='lower center', ncol=5)\n    plt.subplots_adjust(bottom=0.15)\n    \n    return plt.show()"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#data",
    "href": "docs/resources/brightway_seminar.html#data",
    "title": "Welcome!",
    "section": "Data",
    "text": "Data\n\ndata_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600, #kg\n    \"qt_insulation\": 400, #kg\n    \"weight_motor\": 26600+4100+3600+400, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800, #kg\n    \"qt_insulation\": 300, #kg\n    \"weight_motor\": 18000+9200+3800+300, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.9835\n}\n\n\ndata_repair_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600*1.5, #kg\n    \"qt_insulation\": 400*1.5, #kg\n    \"weight_motor\": 26600+4100+3600*1.5+400*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_repair_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800*1.5, #kg\n    \"qt_insulation\": 300*1.5, #kg\n    \"weight_motor\": 18000+9200+3800*1.5+300*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.9835\n}"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#generation-of-results",
    "href": "docs/resources/brightway_seminar.html#generation-of-results",
    "title": "Welcome!",
    "section": "Generation of results",
    "text": "Generation of results"
  },
  {
    "objectID": "docs/resources/brightway_seminar.html#figures-1",
    "href": "docs/resources/brightway_seminar.html#figures-1",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\n\ndef figure_comparison_scenarios(table_results_scenarios, legend_x_axis):\n    number_methods = 2\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [i for i in range(len(dict_scenarios))]\n\n    for index in table_results_scenarios.index:\n        ax[index%2].bar(x_axis[index//2], table_results_scenarios.loc[index, \"score\"])\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels(legend_x_axis, rotation=90)\n        ax[n_fig].set_ylabel(table_results_scenarios.loc[n_fig, \"unit\"])\n\n    plt.subplots_adjust(wspace=0.3)\n    \n    return plt.show()"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html",
    "href": "docs/resources/brightway_seminar_solution.html",
    "title": "Welcome!",
    "section": "",
    "text": "This notebook has been developed for a code-along introductory seminar on using brightway. You can a more complete guide on brightway here.\nMore information on the seminars can be found here."
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#import-the-biosphere-database",
    "href": "docs/resources/brightway_seminar_solution.html#import-the-biosphere-database",
    "title": "Welcome!",
    "section": "Import the “biosphere” database",
    "text": "Import the “biosphere” database\nThe biosphere database is containing the elementary flows necessary for ecoinvent. To load it as well as the impact assessment methods implemented with ecoinvent, use:\n\nbi.bw2setup()\n\nBiosphere database already present!!! No setup is needed\n\n\nTo search activities in a database or manipulate a database, you need to refer to the database “object”. Here, the biosphere database is saved as biosphere_db.\n\nbiosphere_db = bd.Database(\"biosphere3\")"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#import-ecoinvent",
    "href": "docs/resources/brightway_seminar_solution.html#import-ecoinvent",
    "title": "Welcome!",
    "section": "Import ecoinvent",
    "text": "Import ecoinvent\nWhen the biosphere database is imported, the ecoinvent database can be imported as well. The importer uses the folder “datasets” from the extracted files of the .7z file which can be fount on the ecoinvent website. Report the path of this folder below.\n!!! Be careful that the path is with “/” instead of “\\”\n\npath_datasets = \"C:/Users/jeromea/Downloads/ecoinvent_3.9.1_cutoff_ecoSpold02/datasets\"\n\nThe name of the imported database will be:\n\nei_db_name = \"ecoinvent_391_cutoff\"\n\nAfter checking that the same database is not imported twice, the import is done is several steps:\n\nFirst, all the datasets are loaded with bi.SingleOutputEcospold2Importer,\nThen, the data are changed based on several “strategies” which are functions to modify the data,\nYou can check that things went well with statistics(), especially that there is “0 unlinked exchanges”\nFinally, the database, for now only in the memory for your python session, is saved to your computer with write_database()\n\n\nif ei_db_name in bd.databases:\n    print(\"Database has already been imported.\")\nelse:\n    ei_importer = bi.SingleOutputEcospold2Importer(path_datasets, ei_db_name)\n    ei_importer.apply_strategies()\n    ei_importer.statistics() \n    ei_importer.write_database()\n\nDatabase has already been imported.\n\n\nYou can see all the metadata (i.e., the properties for describing the database) of the imported database with:\n\nbd.databases[ei_db_name]\n\n{'overwrite': False,\n 'format': 'Ecoinvent XML',\n 'depends': ['biosphere3'],\n 'backend': 'sqlite',\n 'number': 21238,\n 'modified': '2023-12-04T09:50:17.995532',\n 'geocollections': ['world'],\n 'processed': '2023-12-04T09:53:25.028690',\n 'dirty': False,\n 'searchable': True}\n\n\nAgain, save the database “object” to easily search and get activities from it:\n\nei_db = bd.Database(ei_db_name)"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#accessing-activities-and-flows",
    "href": "docs/resources/brightway_seminar_solution.html#accessing-activities-and-flows",
    "title": "Welcome!",
    "section": "Accessing activities and flows",
    "text": "Accessing activities and flows\nTo search for activities in a database, use the function search. This function is linked to a database object, so it is written as bd.Database(\"database_name\").search(). To avoid the long bd.Database(\"database_name\"), the saved dtabase objects are used.\n\nbiosphere_db.search(\"Carbon dioxide, fossil\")\n\n['Carbon dioxide, fossil' (kilogram, None, ('air', 'low population density, long-term')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air',)),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'non-urban air or from high stacks')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'urban air close to ground')),\n 'Carbon dioxide, fossil' (kilogram, None, ('air', 'lower stratosphere + upper troposphere')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'non-urban air or from high stacks')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'lower stratosphere + upper troposphere')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air',)),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'low population density, long-term')),\n 'Carbon dioxide, non-fossil' (kilogram, None, ('air', 'urban air close to ground')),\n 'Carbon dioxide, non-fossil, resource correction' (kilogram, None, ('natural resource', 'in air'))]\n\n\nTo return (or “get”) a specific activity object, use bd.Database(\"database_name\").get() for which you can specify the name, location, unit, etc.\nBut remember that it can return only one activity! Otherwise, it returns an error. Look for the name, location, etc. with the search function before to know if you catch only one activity.\n\nexample_transport = ei_db.get(name=\"transport, passenger car, medium size, petrol, EURO 3\", location=\"RER\")\n\nTo look at all information stored in the activity (but still not the exchanges), use the function as_dict on the activity object:\n\nexample_transport.as_dict()\n\n{'comment': 'This dataset represents the service of transport in a passenger car for a journey length of 1vkm and is valid for Europe. Fuel consumption and emissions are for average vehicle use and not representative of a specific driving cycle. The dataset is parametrized with respect to vehicle size, fuel consumption and vehicle lifetime. \\nDatasets for three different passenger car categories are available in ecoinvent in view of size: small, medium and large.\\nThe category “small” includes passenger cars with engine size up to 1.4 liters. The average weight of this category is estimated to be 1200 kg. \\nThe category “medium” includes passenger cars with engine size between 1.4 and 2.0 liters. The average weight of this category is estimated to be 1600 kg. \\nThe category “large” includes passenger cars with engine size larger than 2.0 liters. The average weight of this category is estimated to be 2000 kg. \\nThe passenger car size influences the amount of both exhaust and non-exhaust emissions. The exhaust emissions caused by the burning of fuel are divided into two groups: fuel dependent emissions (dependent on fuel type and quantity) and Euro class dependent emissions which reflect the emission standards which the vehicle complies with. Three classes of Euro engine type are considered: Euro 3, Euro 4 and Euro 5.  The higher the class (e.g. Euro 5), the lower the emissions and viceversa. The Euro engine regulation is set by the European Commission “in order to limit as much as possible the negative impact of road vehicles on the environment and health” (European Commission 2012). This dataset considers a medium petrol passenger car of Euro 3 class. Also included within the direct exchanges to the environment are the fuel evaporation emissions from the fuel tank, relevant to petrol vehicles only. \\nNone\\nNon-exhaust emissions are those resulting from tyre, brake and road wear. These emissions are considered as by-products. \\nTechnology:  Transport in a passenger car with internal combustion engine, fueled by petrol. The size is small, with engine size up to 2.0 litres and average weight of 1600 kg.  \\nTechnology classifications are based on those used widely within the works of the European Environment Agency, particularly in the Emissions Inventory Guidebook. The Tremove model - which is also used to generate fuel consumption and emission factors for the datasets presented here - follows this classification system.',\n 'classifications': [('ISIC rev.4 ecoinvent',\n   '4922:Other passenger land transport'),\n  ('CPC', '64119: Other land transportation services of passengers, n.e.c.')],\n 'activity type': 'ordinary transforming activity',\n 'activity': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd',\n 'database': 'ecoinvent_391_cutoff',\n 'filename': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd_3bf68190-17bd-4506-84da-3ef2bcb1b624.spold',\n 'location': 'RER',\n 'name': 'transport, passenger car, medium size, petrol, EURO 3',\n 'synonyms': [],\n 'parameters': [{'description': 'annual total vkm',\n   'id': 'b08278ed-9947-45bf-84fc-45bfc472bd8b',\n   'unit': 'kilometer',\n   'comment': 'Based on Tremove (2009)',\n   'amount': 210326000000.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 26.0719245449185,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'annual_vkm'},\n  {'description': 'co2 emissions per kg petrol',\n   'id': '510bbb41-fb4a-4ed6-8f09-064cb1a92a45',\n   'unit': 'kilogram',\n   'comment': 'Constant for all petrol vehicles',\n   'amount': 3.18,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 1.15688119679209,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'co2_kg_petrol'},\n  {'description': 'emissions from brake friction',\n   'id': '963f7f42-4768-4a18-8d60-669973652be8',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 4.45e-09,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -19.2303617407683,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'brake_wear_emissions'},\n  {'description': 'emissions from road abrasion',\n   'id': '4fe50f59-7759-4db2-8d35-c63314f2deba',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 9.79e-09,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -18.441904380404,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'road_wear_emissions'},\n  {'description': 'emissions from tyre abrasion',\n   'id': 'ca5b7cf8-faad-4893-beab-2f41513db7c4',\n   'unit': 'kg/kg vehicle',\n   'comment': 'Average (small, medium and large weight class) emissions produced per kg vehicle. \\n\\nCalculation of non-exhaust emissions (tyre, brake and road wear emissions as well as petrol evaporation emissions) are based on: Ntziachristos, L., Boulter, P. (2009). EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency\\n',\n   'amount': 5.725e-08,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -16.6758381945121,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'tyre_wear_emissions'},\n  {'description': 'fuel consumption constant',\n   'id': 'c8f2fb31-30d9-4a68-b879-d0167305d4da',\n   'unit': 'dimensionless',\n   'comment': 'Determined from analysing the fuel consumption for vehicles in the Tremove model (2009)',\n   'amount': 2.9288e-05,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -10.4383326821463,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'fc_constant'},\n  {'description': 'fuel consumption of basis vehicle',\n   'id': 'd69aa7c9-1110-4ec8-a4ad-b5f307fedaf6',\n   'unit': 'dimensionless',\n   'comment': 'Fuel consumption as derived from the source data for each vehicle type, size and emissions standard',\n   'amount': 0.06667,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -2.70800020235217,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'fc_basis_vehicle'},\n  {'description': 'gross vehicle weight',\n   'id': '01dbd027-f8ea-4218-81db-a028439db747',\n   'unit': 'kilogram',\n   'comment': 'Weight of vehicle and passengers',\n   'amount': 1697.2,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.43673511332817,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'gross_vehicle_weight'},\n  {'description': 'lifetime of the vehicle',\n   'id': '297dd1cd-575a-4da8-990f-cbfca6a66d3e',\n   'unit': 'kilometer',\n   'comment': 'Distance capacity in the assumed vehicle lifetime.\\n\\nReference: Spielmann (2007) ecoinvent report 14. Ecoinvent centre, Dübendorf.',\n   'amount': 150000.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 11.9183905730784,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'vehicle_lifetime_km'},\n  {'description': 'passenger load factor',\n   'id': '4ad25793-1808-4e8d-a344-bd7ba8b2ce1f',\n   'unit': 'kilogram',\n   'comment': 'Number of passengers multiplied by 60 kg per passenger',\n   'amount': 97.2,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 4.57677071146639,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'LF_passengers'},\n  {'description': 'passengers',\n   'id': '2722dba2-e390-4b43-994c-eb4c338dcb7b',\n   'unit': 'unit',\n   'comment': 'Average number of passengers in passenger car 1.62',\n   'amount': 1.62,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 0.482426149244293,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'passengers'},\n  {'description': 'scaling factor',\n   'id': '291598b5-efd9-424c-b185-42fa2b1aa8b9',\n   'unit': 'dimensionless',\n   'comment': 'The mass of a vehicle influences a range of different exchanges. These are fuel consumption (and thus fuel dependant emissions), non-exhaust emissions and vehicle and road infrastructures. For the infrastructres a scaling factor is used to extrapolate the values appropriate to the basis vehicle. The scaling factor is given by vehicle weight divided by the basis vehicle weight (1240kg).',\n   'amount': 1.29032258064516,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 0.254892249628789,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'scaling_factor'},\n  {'description': 'so2 emissions per kg petrol',\n   'id': 'e5f70abe-ea97-4348-bfa8-15a784660fda',\n   'unit': 'kilogram',\n   'comment': 'Constant for all petrol vehicles',\n   'amount': 2e-05,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': -10.8197782844103,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'so2_kg_petrol'},\n  {'description': 'weight of the basis vehicle',\n   'id': 'cffc5607-d071-4a68-b6fb-b01e7c85290d',\n   'unit': 'kg/unit',\n   'comment': 'The basis vehicle is the one on which the original life cycle inventory was conducted. It is representative of a VW Golf.',\n   'amount': 1240.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.12286665859908,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'basis_vehicle_weight'},\n  {'description': 'weight of the vehicle',\n   'id': '9cd30d63-8c02-47ee-9621-31a92d15bb72',\n   'unit': 'kg/unit',\n   'comment': 'Empty vehicle weight (curb weight) according to each vehicle class used: small cars (<1.4 litres) 1200kg; \\nmedium size cars (1.4 - 2.0 litres) 1600kg; \\nlarge size cars (>2.0 litres) 2000kg',\n   'amount': 1600.0,\n   'pedigree': {'reliability': 2,\n    'completeness': 2,\n    'temporal correlation': 2,\n    'geographical correlation': 1,\n    'further technological correlation': 1},\n   'uncertainty type': 2,\n   'loc': 7.37775890822787,\n   'scale': 0.03872983346207417,\n   'scale without pedigree': 0.02449489742783178,\n   'name': 'vehicle_weight'}],\n 'authors': {'data entry': {'name': 'Andrew Simons',\n   'email': 'andrew.simons@3sp.ch'},\n  'data generator': {'name': 'Andrew Simons',\n   'email': 'andrew.simons@3sp.ch'}},\n 'type': 'process',\n 'reference product': 'transport, passenger car, medium size, petrol, EURO 3',\n 'flow': '3bf68190-17bd-4506-84da-3ef2bcb1b624',\n 'unit': 'kilometer',\n 'production amount': 1.0,\n 'code': 'f47975feec24d99acfd8fd14ecc84c49',\n 'id': 19682}\n\n\nTo look at the exchanges, you can go throught them with a list:\n\n[ex for ex in example_transport.exchanges()]\n\n[Exchange: 1.0 kilometer 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -7.55254e-06 kilogram 'market for brake wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 8.6021505376344e-06 unit 'maintenance, passenger car' (unit, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0106666666666667 kilogram 'market for passenger car, petrol/natural gas' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0682165984485006 kilogram 'market for petrol, low-sulfur' (kilogram, Europe without Switzerland, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.001300195151499404 kilogram 'market for petrol, low-sulfur' (kilogram, CH, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.0009113964 meter-year 'market for road' (meter-year, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.000265427119835466 meter-year 'market for road maintenance' (meter-year, RER, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -1.6615588e-05 kilogram 'market for road wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: -9.71647e-05 kilogram 'market for tyre wear emissions, passenger car' (kilogram, GLO, None) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.952e-08 kilogram '1-Pentene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.417e-06 kilogram '2-Methylpentane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.013e-07 kilogram 'Acetaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.637e-07 kilogram 'Acetone' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.099e-08 kilogram 'Acrolein' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.085503808e-06 kilogram 'Ammonia' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.904e-08 kilogram 'Benzaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.043e-06 kilogram 'Benzene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.606e-06 kilogram 'Butane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-10 kilogram 'Cadmium II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.221063403648 kilogram 'Carbon dioxide, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 0.001467 kilogram 'Carbon monoxide, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.47583968e-09 kilogram 'Chromium III' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-12 kilogram 'Chromium VI' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.1817854912e-07 kilogram 'Copper ion' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.059e-07 kilogram 'Cyclohexane (for all cycloalkanes)' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 9.037183168e-06 kilogram 'Dinitrogen monoxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.174e-06 kilogram 'Ethane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.645e-08 kilogram 'Ethylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.959e-06 kilogram 'Ethylene oxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.562e-07 kilogram 'Formaldehyde' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.986e-07 kilogram 'Heptane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.321e-07 kilogram 'Hexane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.042751904e-10 kilogram 'Lead II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.866175552e-12 kilogram 'Mercury II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.177e-05 kilogram 'Methane, fossil' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.342e-08 kilogram 'Methyl ethyl ketone' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.855e-05 kilogram 'NMVOC, non-methane volatile organic compounds' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 4.866175552e-09 kilogram 'Nickel II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.481e-05 kilogram 'Nitrogen oxides' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.41918441728e-09 kilogram 'PAH, polycyclic aromatic hydrocarbons' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.029e-06 kilogram 'Particulate Matter, < 2.5 um' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 8.745e-06 kilogram 'Pentane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 5.623e-06 kilogram 'Propane' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.481e-07 kilogram 'Propene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.025e-06 kilogram 'Propylene oxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-10 kilogram 'Selenium IV' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 2.711e-07 kilogram 'Styrene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 1.390335872e-06 kilogram 'Sulfur dioxide' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.583e-06 kilogram 'Toluene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 6.95167936e-08 kilogram 'Zinc II' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 3.273e-06 kilogram 'm-Xylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>,\n Exchange: 7.842e-07 kilogram 'o-Xylene' (kilogram, None, ('air', 'urban air close to ground')) to 'transport, passenger car, medium size, petrol, EURO 3' (kilometer, RER, None)>]\n\n\nThis example is good to understand the three types of exchanges:\n\nproduction: for the main output of the activity, the product that is produced with this activity,\ntechnosphere: the inputs from the technosphere, i.e., from other activities in the dtabases in the project,\nbiosphere: the emissions and natural resources of elementary flows, from the biosphere database.\n\nSpecifying the type of exchange is necessary when creating new ones.\nBelow are some examples of exchanges. Here of a production exchange:\n\nlist(example_transport.exchanges())[0].as_dict()\n\n{'flow': '3bf68190-17bd-4506-84da-3ef2bcb1b624',\n 'type': 'production',\n 'name': 'transport, passenger car, medium size, petrol, EURO 3',\n 'classifications': {'CPC': ['64119: Other land transportation services of passengers, n.e.c.']},\n 'production volume': 210326000000.0,\n 'properties': {'carbon allocation': {'amount': 0.0, 'unit': 'kg'},\n  'carbon content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'price': {'amount': 0.1762454815541633,\n   'comment': 'Calculated based on inputs: The price of the product has been calculated as a sum of the values of the material and energy inputs for this product. This value is therefore a rough estimation. It may underestimate the real price since there are additional expenses when producing any product. These expences can include for example labour costs, treatment of waste materials and profit for the producer. Please consider carefully whether this level of data quality is acceptable for your application.',\n   'unit': 'EUR2005'}},\n 'activity': 'b3feb9fe-03bc-5abe-9aa5-b9d588502cbd',\n 'unit': 'kilometer',\n 'amount': 1.0,\n 'uncertainty type': 0,\n 'loc': 1.0,\n 'input': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}\n\n\nHere of a technosphere exchange:\n\nlist(example_transport.exchanges())[1].as_dict()\n\n{'flow': '5b975ec7-3bbe-46a1-88a0-d475a87a6eab',\n 'type': 'technosphere',\n 'name': 'brake wear emissions, passenger car',\n 'classifications': {'CPC': ['49129: Other parts and accessories n.e.c. of motor vehicles (including brakes, gear boxes, axles, road wheels, suspen[…]']},\n 'production volume': 0.0,\n 'properties': {'carbon allocation': {'amount': 0.0, 'unit': 'kg'},\n  'carbon content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'price': {'amount': 0.0,\n   'comment': 'Waste products are assigned a price of zero as they are assumed to require further treatment.',\n   'unit': 'EUR2005'}},\n 'activity': '4fcfcee4-2e07-5d48-86e9-9e569ff7a3b5',\n 'unit': 'kilogram',\n 'comment': 'Quantity of emissions based on values from Ntziachristos, L., Boulter, P. (2009) EMEP/EEA air pollutant emissions inventory guidebook 2009: Road vehicle tyre and brake wear; Road surface wear. Copenhagen, European Environment Agency. Quantities given in the source assumed to represent medium sized vehicles. Quantities for small and large vehicles taken from the bounds of the ranges given.',\n 'variable name': 'brake_emissions',\n 'formula': 'brake_wear_emissions* gross_vehicle_weight',\n 'amount': -7.55254e-06,\n 'pedigree': {'reliability': 2,\n  'completeness': 2,\n  'temporal correlation': 2,\n  'geographical correlation': 1,\n  'further technological correlation': 1},\n 'uncertainty type': 2,\n 'loc': -11.793626627440092,\n 'scale': 0.03872983346207417,\n 'scale without pedigree': 0.02449489742783178,\n 'input': ('ecoinvent_391_cutoff', 'ca8816e4f3b0da5483a65d625084b13a'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}\n\n\nAnd here of a biosphere exchange:\n\nlist(example_transport.exchanges())[10].as_dict()\n\n{'flow': '8cbaa905-41b0-4327-8403-bf1c8eb25429',\n 'type': 'biosphere',\n 'name': '1-Pentene',\n 'classifications': {'CPC': []},\n 'production volume': 0.0,\n 'properties': {'carbon allocation': {'amount': 0.856284505178628,\n   'unit': 'kg'},\n  'carbon content': {'amount': 0.856284505178628, 'unit': 'dimensionless'},\n  'carbon content, fossil': {'amount': 0.856284505178628,\n   'unit': 'dimensionless'},\n  'carbon content, non-fossil': {'amount': 0.0, 'unit': 'dimensionless'},\n  'dry mass': {'amount': 1.0, 'unit': 'kg'},\n  'water content': {'amount': 0.0, 'unit': 'dimensionless'},\n  'water in wet mass': {'amount': 0.0, 'unit': 'kg'},\n  'wet mass': {'amount': 1.0, 'unit': 'kg'}},\n 'unit': 'kilogram',\n 'comment': 'Emissions dependent on engine Euro class (Euro 3, Euro 4 and Euro 5).',\n 'amount': 2.952e-08,\n 'pedigree': {'reliability': 2,\n  'completeness': 2,\n  'temporal correlation': 5,\n  'geographical correlation': 1,\n  'further technological correlation': 1},\n 'uncertainty type': 2,\n 'loc': -17.33819783721414,\n 'scale': 0.20322401432901577,\n 'scale without pedigree': 0.02449489742783178,\n 'input': ('biosphere3', '8cbaa905-41b0-4327-8403-bf1c8eb25429'),\n 'output': ('ecoinvent_391_cutoff', 'f47975feec24d99acfd8fd14ecc84c49')}"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#create-the-database",
    "href": "docs/resources/brightway_seminar_solution.html#create-the-database",
    "title": "Welcome!",
    "section": "Create the database",
    "text": "Create the database\nAs errors can happen but as everything is available to re-write the database, it is convenient sometimes to re-start from zero. Here is a function to delete a database if it exists in the current project:\n\ndef reset_brightway_database(db_name):\n    if db_name in bd.databases:\n        del bd.databases[db_name]\n\nTo create a new database, create a database “object” with a name, and then save it on your computer with register:\n\nname_motor_db = \"motor_case\"\nreset_brightway_database(name_motor_db)\nmotor_db = bd.Database(name_motor_db)\nmotor_db.register()\n\nLet’s check that it was created:\n\nbd.databases\n\nDatabases dictionary with 3 object(s):\n    biosphere3\n    ecoinvent_391_cutoff\n    motor_case"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#add-activities",
    "href": "docs/resources/brightway_seminar_solution.html#add-activities",
    "title": "Welcome!",
    "section": "Add activities",
    "text": "Add activities\nAs for databases, it is convenient to be able to delete an activity to re-start from zero. Here is a function for that:\n\ndef reset_activity(act_name, database=motor_db):\n    for activity in [act for act in motor_db if act['name']==act_name]:\n        activity.delete()\n\nIn a database saved as a database “object” database_object, a new activity is created with the function new_activityand then saved on your computer with save().\nAn activity needs necessarily:\n\nA name,\nA unique code, i.e., you can have several activities with the same name, but the computer needs a different code to distinguish them,\nA unit.\n\n\n# act_motor_production = motor_db.new_activity(\n#     name = \"motor production\",\n#     code = \"motor production\",\n#     unit = \"unit\",\n#     location = \"GLO\"\n# )\n# act_motor_production.save()\n\nThen, exchanges can be added with the function new_exchange and save()to store it on your computer. The necessary information for an exchange are:\n\nAn input, i.e., the activity from which the input comes from, or the activity in the biosphere database for an input/output of elementary flow,\nAn amount (the unit is defined by the input),\nA type of exchange, i.e., production, technosphere or biosphere.\n\nYou can have several exchanges from the same input, with the same value, so it can happen that you add the same exchange twice. To avoid that, here is a function that:\n\nDelete the activity if it exists,\nCreate an activity with a code that is the same as the name,\nAdd technosphere exchanges based on a list of (input, amount).\n\nThat will be enough for us in this example.\n\ndef create_new_activity(act_name, unit, exchanges, database=motor_db):\n    reset_activity(act_name, database)\n    act_new = motor_db.new_activity(\n        name = act_name,\n        code = act_name,\n        unit = unit\n    )\n    act_new.save()\n    for input, amount in exchanges:\n        act_new.new_exchange(\n            input = input,\n            amount = amount,\n            type = \"technosphere\"\n        ).save()\n    act_new.save()\n\nInputs from ecoinvent\nFirst, let get the necessary activities from ecoinvent:\n\nact_steel_unalloyed = ei_db.get(name=\"market for steel, unalloyed\", location=\"GLO\")\n\n\nact_steel_low_alloyed = ei_db.get(name=\"market for steel, low-alloyed\", location=\"GLO\")\n\n\nact_copper = ei_db.get(name=\"market for copper, cathode\", location=\"GLO\")\n\n\nact_insulation = ei_db.get(name=\"market for epoxy resin, liquid\", location=\"RER\")\n\n\nact_elec = ei_db.get(name=\"market for electricity, high voltage\", location=\"SE\")\n\n\nact_incineration_insulation = ei_db.get(name=\"treatment of waste plastic, mixture, municipal incineration with fly ash extraction\", location=\"CH\", unit=\"kilogram\")\n\n\nact_incineration_copper = ei_db.get(name=\"treatment of copper in car shredder residue, municipal incineration with fly ash extraction\", location=\"CH\")\n\nParameters\nThen the value of different parameters useful to create the activities.\n\nqt_steel_unalloyed = 26600 #kg\nqt_steel_low_alloyed = 4100 #kg\nqt_copper = 3600 #kg\nqt_insulation = 400 #kg\nweight_motor = qt_steel_unalloyed + qt_steel_low_alloyed + qt_copper + qt_insulation\noutput_power = 16000 #kW\nop_hours = 8400 #hours per year\nlifetime = 20 #years\nefficiency = 0.973\n\nActivities creation\nWith our own function create_new_activity, creating an activity looks like that:\n\ndef create_motor_production(qt_steel_unalloyed=qt_steel_unalloyed, qt_steel_low_alloyed=qt_steel_low_alloyed, qt_copper=qt_copper, qt_insulation=qt_insulation):\n    create_new_activity(\n        \"motor production\",\n        \"unit\",\n        [\n            (act_steel_unalloyed, qt_steel_unalloyed),\n            (act_steel_low_alloyed, qt_steel_low_alloyed),\n            (act_copper, qt_copper),\n            (act_insulation, qt_insulation),\n            (act_elec, 3600)\n        ]\n    )\n\nWhen activity creation is scattered in the code, it is practical to turn it as functions. When each activity creation is under a function, a last function can call all of them in the right order. Then, you are sure that all your created database is updated.\nIn the creation functions, you can also add input parameters to be able to change them quickly.\nLet’s do this for all activities in the life cycle of a motor.\n\ndef create_motor_testing():\n    create_new_activity(\n        \"motor testing\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor production\"), 1),\n            (act_elec, 16000)\n        ]\n    )\n\n\ndef create_motor_use(lifetime=lifetime, efficiency=efficiency):\n    create_new_activity(\n        \"motor use\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor testing\"), 1),\n            (act_elec, output_power*op_hours*lifetime*(1/efficiency-1))\n        ]\n    )\n\n\ndef create_motor_treatment(weight_motor=weight_motor, qt_insulation=qt_insulation, qt_copper=qt_copper):\n    create_new_activity(\n        \"motor EoL treatment\",\n        \"unit\",\n        [\n            (motor_db.get(\"motor use\"), 1),\n            (act_elec, 0.041*weight_motor),\n            (act_incineration_insulation, -qt_insulation),\n            (act_incineration_copper, -0.04*qt_copper)\n        ]\n    )\n\nAnd now a function to call all the functions which creates activities:\n\ndef create_motor_system(\n    qt_steel_unalloyed=qt_steel_unalloyed, \n    qt_steel_low_alloyed=qt_steel_low_alloyed, \n    qt_copper=qt_copper, \n    qt_insulation=qt_insulation, \n    lifetime=lifetime, \n    efficiency=efficiency, \n    weight_motor=weight_motor\n):\n    create_motor_production(qt_steel_unalloyed=qt_steel_unalloyed, qt_steel_low_alloyed=qt_steel_low_alloyed, qt_copper=qt_copper, qt_insulation=qt_insulation)\n    create_motor_testing()\n    create_motor_use(lifetime=lifetime, efficiency=efficiency)\n    create_motor_treatment(weight_motor=weight_motor, qt_insulation=qt_insulation, qt_copper=qt_copper)\n\n\ncreate_motor_system()\n\nTo check the activities in the database:\n\n[act for act in motor_db]\n\n['motor use' (unit, GLO, None),\n 'motor EoL treatment' (unit, GLO, None),\n 'motor testing' (unit, GLO, None),\n 'motor production' (unit, GLO, None)]"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#selection-of-impact-assessment-methods",
    "href": "docs/resources/brightway_seminar_solution.html#selection-of-impact-assessment-methods",
    "title": "Welcome!",
    "section": "Selection of impact assessment methods",
    "text": "Selection of impact assessment methods\nImpact assessment methods have been imported with the biosphere database. The list of all available methods is accessible with:\n\nbd.methods\n\nMethods dictionary with 762 objects, including:\n    ('CML v4.8 2016', 'acidification', 'acidification (incl. fate, average Europe total, A&B)')\n    ('CML v4.8 2016', 'climate change', 'global warming potential (GWP100)')\n    ('CML v4.8 2016', 'ecotoxicity: freshwater', 'freshwater aquatic ecotoxicity (FAETP inf)')\n    ('CML v4.8 2016', 'ecotoxicity: marine', 'marine aquatic ecotoxicity (MAETP inf)')\n    ('CML v4.8 2016', 'ecotoxicity: terrestrial', 'terrestrial ecotoxicity (TETP inf)')\n    ('CML v4.8 2016', 'energy resources: non-renewable', 'abiotic depletion potential (ADP): fossil fuels')\n    ('CML v4.8 2016', 'eutrophication', 'eutrophication (fate not incl.)')\n    ('CML v4.8 2016', 'human toxicity', 'human toxicity (HTP inf)')\n    ('CML v4.8 2016', 'material resources: metals/minerals', 'abiotic depletion potential (ADP): elements (ultimate reserves)')\n    ('CML v4.8 2016', 'ozone depletion', 'ozone layer depletion (ODP steady state)')\nUse `list(this object)` to get the complete list.\n\n\nFor searching in the list of methods, use conditions in the list:\n\n[method for method in bd.methods if \"climate change\" in str(method) and \"EF v3.1\" in str(method)]\n\n[('EF v3.1 no LT',\n  'climate change no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: biogenic no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: fossil no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1 no LT',\n  'climate change: land use and land use change no LT',\n  'global warming potential (GWP100) no LT'),\n ('EF v3.1', 'climate change', 'global warming potential (GWP100)'),\n ('EF v3.1', 'climate change: biogenic', 'global warming potential (GWP100)'),\n ('EF v3.1', 'climate change: fossil', 'global warming potential (GWP100)'),\n ('EF v3.1',\n  'climate change: land use and land use change',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804', 'climate change', 'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: biogenic',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: fossil',\n  'global warming potential (GWP100)'),\n ('EF v3.1 EN15804',\n  'climate change: land use and land use change',\n  'global warming potential (GWP100)')]\n\n\nMethods can be selected when knowing the tuple for their name:\n\ngw_method = ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n\nOr by selecting the items in a list:\n\ncsi_method = [method for method in bd.methods if \"Crustal\" in str(method)][0]"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#impact-assessment",
    "href": "docs/resources/brightway_seminar_solution.html#impact-assessment",
    "title": "Welcome!",
    "section": "Impact assessment",
    "text": "Impact assessment\nThe impact assessment is divided in several steps. First, the functional unit is defined as a dictionary {activity: amount}.\n\nfunctional_unit = {motor_db.get(\"motor EoL treatment\"): 1/lifetime}\n\nThen an LCA “object” is created by specifying the functional unit and the impact assessment method (only one):\n\nlca = bc.LCA(demand=functional_unit, method=gw_method)\n\nThe inventory is calculated:\n\nlca.lci()\n\nAnd finally the impact assessment:\n\nlca.lcia()\n\nThe score can be accessed with:\n\nlca.score\n\n126133.21969201368\n\n\nAnd the method can be accessed with lca.method. So here is the score with the unit:\n\nprint(\"{:.2e}\".format(lca.score) + \" \" + bd.methods.get(lca.method)[\"unit\"])\n\n1.26e+05 kg CO2-Eq\n\n\nTo calculate another impact category, use:\n\nlca.switch_method(csi_method)\n\nThe inventory does not need to be recalculated. Only the impact assessment:\n\nlca.lcia()\n\n\nprint(\"{:.2e}\".format(lca.score) + \" \" + bd.methods.get(lca.method)[\"unit\"])\n\n1.26e+05 kg CO2-Eq\n\n\nHere is a function to calculate the impact for several impact categories and return the results in a table:\n\ndef lca_results(fu, list_methods):\n    list_units = [bd.methods.get(method)[\"unit\"] for method in list_methods]\n    lca = bc.LCA(demand=fu, method=list_methods[0])\n    lca.lci()\n    lca.lcia()\n    list_scores = [lca.score]\n    for method in list_methods[1:]:\n        lca.switch_method(method)\n        lca.lcia()\n        list_scores.append(lca.score)\n    return pd.DataFrame({\"score\": list_scores, \"unit\": list_units, \"method\": list_methods})\n\nHere is a test:\n\nfunctional_unit = {motor_db.get(\"motor EoL treatment\"): 1/lifetime}\nlca_results(functional_unit, [gw_method, csi_method])\n\n\n\n\n\n  \n    \n      \n      score\n      unit\n      method\n    \n  \n  \n    \n      0\n      1.261332e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n    \n    \n      1\n      2.419240e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res..."
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#basic-contribution-analysis",
    "href": "docs/resources/brightway_seminar_solution.html#basic-contribution-analysis",
    "title": "Welcome!",
    "section": "Basic contribution analysis",
    "text": "Basic contribution analysis\nBrightway provides functions for contribution analysis with the top processes:\n\nbwa.ContributionAnalysis().annotated_top_processes(lca, limit = 5)\n#(lca score, supply amount, activity name)\n\n[(19589.71312008136,\n  6023.106284064705,\n  'treatment of blast furnace gas, in power plant' (kilowatt hour, SE, None)),\n (13829.050334679665,\n  310709.31328500307,\n  'electricity production, hydro, reservoir, non-alpine region' (kilowatt hour, SE, None)),\n (6482.820413308244,\n  5469.66345635338,\n  'electricity production, lignite' (kilowatt hour, DE, None)),\n (5359.031914767668,\n  4911.163637622725,\n  'heat and power co-generation, hard coal' (kilowatt hour, SE, None)),\n (5288.868591922492,\n  3874629.1029527863,\n  'market for electricity, high voltage' (kilowatt hour, SE, None))]\n\n\nAnd with the top contributing elementary flows:\n\nbwa.ContributionAnalysis().annotated_top_emissions(lca, limit=0.1, limit_type=\"percent\")\n\n[(8086238.68038977,\n  36.75563036540805,\n  'Uranium' (kilogram, None, ('natural resource', 'in ground'))),\n (3326223.0710267425,\n  18479.017061259685,\n  'Coal, hard, unspecified' (kilogram, None, ('natural resource', 'in ground')))]\n\n\nThe cut-off can be expressed in terms of number of processes/flows or in terms of percentages."
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#customised-contribution-analysis",
    "href": "docs/resources/brightway_seminar_solution.html#customised-contribution-analysis",
    "title": "Welcome!",
    "section": "Customised contribution analysis",
    "text": "Customised contribution analysis\nHere I provide functions for contribution analysis for the processes in the created database:\n\ndef table_recursive_multi_calculation_dbparent_cut(activity, lcia_methods, amount=1, level=0, max_level=3, db_parent=None, db_cut=['ecoinvent'], act_parent={\"name\": None}):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain sub-activities if the activity is from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, activity parent, database parent, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], act_parent[\"name\"], db_parent]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"activity parent\", \"database parent\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        db_parent = activity['database']\n        go_forward = True\n        for stop_word in db_cut:\n            if stop_word in db_parent:\n                go_forward = False\n        if go_forward:\n            for exc in activity.technosphere():\n                table = pd.concat([table, table_recursive_multi_calculation_dbparent_cut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_parent = db_parent,\n                    act_parent = activity\n                )], ignore_index=True)\n    return table\n\n\ndef table_recursive_multi_calculation_dbcut(activity, lcia_methods, amount=1, level=0, max_level=3, db_activity='motor_case', db_cut=['ecoinvent', 'biosphere']):\n    \"\"\"\n    Returns a table (DataFrame) with the contribution tree for a given activity and various LCIA methods.\n    The contribution tree does not contain activities if they are from a database in db_cut (to avoid \n    having details on ecoinvent datasets and to stay in my own model) and has the maximum level max_level.\n    Columns for the returned table: level, activity, database, and str(method) for all LCIA method explored.\n    \"\"\"\n    \n    lca_score = lca_results({activity: amount}, lcia_methods)\n    table = pd.DataFrame([[level, activity[\"name\"], db_activity]+ list(lca_score[\"score\"])], columns=[\"level\", \"activity\", \"database\"]+[str(m) for m in lcia_methods])\n    if level < max_level:\n        for exc in activity.technosphere():\n            db_exc = exc.input['database']\n            go_forward = True\n            for stop_word in db_cut:\n                if stop_word in db_exc:\n                    go_forward = False\n            if go_forward:\n                table = pd.concat([table, table_recursive_multi_calculation_dbcut(\n                    activity=exc.input, \n                    lcia_methods=lcia_methods, \n                    amount=amount * exc['amount'], \n                    level=level + 1, \n                    max_level=max_level,\n                    db_activity = db_exc\n                )], ignore_index=True)\n    return table\n\n\ntable_recursive_multi_calculation_dbcut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\n\n\n\n  \n    \n      \n      level\n      activity\n      database\n      ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n      ('Crustal Scarcity Indicator 2020', 'material resources: metals/minerals', 'crustal scarcity potential (CSP)')\n    \n  \n  \n    \n      0\n      0\n      motor EoL treatment\n      motor_case\n      152106.850012\n      3.135959e+07\n    \n    \n      1\n      1\n      motor use\n      motor_case\n      152050.853441\n      3.135912e+07\n    \n    \n      2\n      2\n      motor testing\n      motor_case\n      4628.080466\n      9.496619e+06\n    \n    \n      3\n      3\n      motor production\n      motor_case\n      4601.927814\n      9.492741e+06\n    \n  \n\n\n\n\n\ntable_recursive_multi_calculation_dbparent_cut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\n\n\n\n  \n    \n      \n      level\n      activity\n      activity parent\n      database parent\n      ('EF v3.1', 'climate change', 'global warming potential (GWP100)')\n      ('Crustal Scarcity Indicator 2020', 'material resources: metals/minerals', 'crustal scarcity potential (CSP)')\n    \n  \n  \n    \n      0\n      0\n      motor EoL treatment\n      None\n      None\n      126133.219692\n      2.419240e+07\n    \n    \n      1\n      1\n      motor use\n      motor EoL treatment\n      motor_case\n      126083.220046\n      2.419194e+07\n    \n    \n      2\n      2\n      motor testing\n      motor use\n      motor_case\n      4162.943978\n      6.111411e+06\n    \n    \n      3\n      3\n      motor production\n      motor testing\n      motor_case\n      4136.791326\n      6.107533e+06\n    \n    \n      4\n      3\n      market for electricity, high voltage\n      motor testing\n      motor_case\n      26.152652\n      3.878385e+03\n    \n    \n      5\n      2\n      market for electricity, high voltage\n      motor use\n      motor_case\n      121920.276162\n      1.808053e+07\n    \n    \n      6\n      1\n      market for electricity, high voltage\n      motor EoL treatment\n      motor_case\n      2.325461\n      3.448611e+02\n    \n    \n      7\n      1\n      treatment of waste plastic, mixture, municipal...\n      motor EoL treatment\n      motor_case\n      47.394643\n      7.412927e+01\n    \n    \n      8\n      1\n      treatment of copper in car shredder residue, m...\n      motor EoL treatment\n      motor_case\n      0.279543\n      3.811270e+01"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#figures",
    "href": "docs/resources/brightway_seminar_solution.html#figures",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\nHere is a way to generate a box plot figure.\n\nown_colors = {\n    \"motor production\":\"#1f78b4\", #blue\n    \"motor use\":\"#969696\", #gray\n    \"motor EoL treatment\": \"#41ae76\", #green\n    \"motor testing\":\"#fff7bc\" #yellow\n}\n\n\ntable_results = table_recursive_multi_calculation_dbcut(\n    activity = motor_db.get(\"motor EoL treatment\"), \n    lcia_methods=[gw_method, csi_method], \n    amount = 1/lifetime,\n    max_level = 3\n)\n\n\ndef basic_bar_chart(table_results, legend_x_axis, own_colors=own_colors):\n    table_figure = table_results.set_index(table_results[\"activity\"])\n    number_methods = table_figure.shape[1] - 3\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [0]\n\n    for n_fig, method in enumerate(table_figure.columns[3:]):\n        for activity in table_figure.index:\n            if n_fig == 0:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    label=activity, \n                    color=own_colors[activity]\n                )\n            else:\n                ax[n_fig].bar(\n                    x_axis, \n                    table_figure.loc[activity, method], \n                    color=own_colors[activity]\n                )\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels([legend_x_axis[n_fig]], fontsize=14)\n    \n    fig.legend(loc='lower center', ncol=5)\n    plt.subplots_adjust(bottom=0.15)\n    \n    return plt.show()\n\n\nbasic_bar_chart(\n    table_results,\n    [\"GW\", \"CSI\"]\n)"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#data",
    "href": "docs/resources/brightway_seminar_solution.html#data",
    "title": "Welcome!",
    "section": "Data",
    "text": "Data\n\ndata_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600, #kg\n    \"qt_insulation\": 400, #kg\n    \"weight_motor\": 26600+4100+3600+400, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800, #kg\n    \"qt_insulation\": 300, #kg\n    \"weight_motor\": 18000+9200+3800+300, #kg\n    \"lifetime\": 20, #years\n    \"efficiency\": 0.9835\n}\n\n\ndata_repair_low_efficiency = {\n    \"qt_steel_unalloyed\": 26600, #kg\n    \"qt_steel_low_alloyed\": 4100, #kg\n    \"qt_copper\": 3600*1.5, #kg\n    \"qt_insulation\": 400*1.5, #kg\n    \"weight_motor\": 26600+4100+3600*1.5+400*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.973\n}\n\n\ndata_repair_high_efficiency = {\n    \"qt_steel_unalloyed\": 18000, #kg\n    \"qt_steel_low_alloyed\": 9200, #kg\n    \"qt_copper\": 3800*1.5, #kg\n    \"qt_insulation\": 300*1.5, #kg\n    \"weight_motor\": 18000+9200+3800*1.5+300*1.5, #kg\n    \"lifetime\": 40, #years\n    \"efficiency\": 0.9835\n}"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#generation-of-results",
    "href": "docs/resources/brightway_seminar_solution.html#generation-of-results",
    "title": "Welcome!",
    "section": "Generation of results",
    "text": "Generation of results\n\ndict_scenarios = {\n    \"low efficiency\": data_low_efficiency, \n    \"high efficiency\": data_high_efficiency, \n    \"repair low efficiency\": data_repair_low_efficiency, \n    \"repair high efficiency\": data_repair_high_efficiency\n}\n\n\ndef return_table_results_scenarios(dict_scenarios, methods=[gw_method, csi_method]):\n    results_table = pd.DataFrame()\n    for name, data in dict_scenarios.items():\n        create_motor_system(**data)\n        functional_unit = {motor_db.get(\"motor EoL treatment\"): 1/data[\"lifetime\"]}\n        results_table_scenario = lca_results(functional_unit, methods)\n        results_table_scenario[\"scenario\"] = name\n        results_table = pd.concat([results_table, results_table_scenario], ignore_index=True)\n    return results_table\n\n\ntable_results_scenarios = return_table_results_scenarios(dict_scenarios)\n\n\ntable_results_scenarios\n\n\n\n\n\n  \n    \n      \n      score\n      unit\n      method\n      scenario\n    \n  \n  \n    \n      0\n      1.261332e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      low efficiency\n    \n    \n      1\n      2.419240e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      low efficiency\n    \n    \n      2\n      7.768786e+04\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      high efficiency\n    \n    \n      3\n      1.736572e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      high efficiency\n    \n    \n      4\n      1.243726e+05\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      repair low efficiency\n    \n    \n      5\n      2.258877e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      repair low efficiency\n    \n    \n      6\n      7.605343e+04\n      kg CO2-Eq\n      (EF v3.1, climate change, global warming poten...\n      repair high efficiency\n    \n    \n      7\n      1.567980e+07\n      kg Si-Eq\n      (Crustal Scarcity Indicator 2020, material res...\n      repair high efficiency"
  },
  {
    "objectID": "docs/resources/brightway_seminar_solution.html#figures-1",
    "href": "docs/resources/brightway_seminar_solution.html#figures-1",
    "title": "Welcome!",
    "section": "Figures",
    "text": "Figures\n\ndef figure_comparison_scenarios(table_results_scenarios, legend_x_axis):\n    number_methods = 2\n\n    fig, ax = plt.subplots(1, number_methods)\n    x_axis = [i for i in range(len(dict_scenarios))]\n\n    for index in table_results_scenarios.index:\n        ax[index%2].bar(x_axis[index//2], table_results_scenarios.loc[index, \"score\"])\n    \n    fig.tight_layout()\n    for n_fig in range(number_methods):\n        ax[n_fig].grid(True, axis='y', linewidth=0.4)\n        ax[n_fig].set_xticks(x_axis)\n        ax[n_fig].set_xticklabels(legend_x_axis, rotation=90)\n        ax[n_fig].set_ylabel(table_results_scenarios.loc[n_fig, \"unit\"])\n\n    plt.subplots_adjust(wspace=0.3)\n    \n    return plt.show()\n\n\nfigure_comparison_scenarios(table_results_scenarios, list(dict_scenarios.keys()))"
  },
  {
    "objectID": "python.html#but-why-creating-these-environments-several-reasons",
    "href": "python.html#but-why-creating-these-environments-several-reasons",
    "title": "Python",
    "section": "But why creating these environments? Several reasons:",
    "text": "But why creating these environments? Several reasons:\nIt is useful when working with core packages that are dependent on different versions of other packages. As an example, the Activity Browser uses brightway with specific versions which might not be the latest. If one wants to work both with the Activity Browser and the latest version of brightway, the easiest solution is to have two virtual environments: one for the Activity Browser and one for brightway.\nHere is the full documentation for managing Python environments with conda (available with Anaconda). I summarise below the few commands that are useful on a regular basis. All of them are to be written on an Anaconda prompt."
  },
  {
    "objectID": "python.html#good-practices-with-environment",
    "href": "python.html#good-practices-with-environment",
    "title": "Python",
    "section": "Good practices with environment",
    "text": "Good practices with environment\nFrom my personal experience, I gathered the following tips.\n\n\n\n\n\n\nNever update a package in a functioning environment!\n\n\n\nIf one package is updated, there is a risk that compatibility issues with other packages arise. Keep the functioning environment and create another environment with the updated package. If the updated version does not work on a project, the functioning environment is still available for working on the project while the problem is fixed. The environment with the old version can be deleted after being sure that the updated version is functioning.\n\n\n\n\n\n\n\n\nCreate one environment per project\n\n\n\nAs explained above, it is good to have the list of packages and their version which allows a project to work. As the list of useful packages might evolve while the project is developed, create a new environment for each project and save the list of packages and their version in a text file (see command here). On another computer, it is then possible to re-create the same environment based on this list."
  },
  {
    "objectID": "python.html#how-to-read-errors",
    "href": "python.html#how-to-read-errors",
    "title": "Python",
    "section": "How to read errors",
    "text": "How to read errors"
  },
  {
    "objectID": "python.html#where-to-find-help",
    "href": "python.html#where-to-find-help",
    "title": "Python",
    "section": "Where to find help",
    "text": "Where to find help\nIf you do not understand your error and how to solve it:\n\nAsk a colleague if available!\nAsk ChatGPT. Give it your error code, and eventually the chuck of code that is problematic if it is not confidential.\nAsk Google. Somebody probably ran into the same problem and was given a solution.\nLook at the documentation or user manual.\nAsk the community if the question has not already been answered. It can be done via:\n\nStackoverflow,\nGitHub (for bugs related to a package)."
  },
  {
    "objectID": "brightway_page.html#in-the-brightway-documentation",
    "href": "brightway_page.html#in-the-brightway-documentation",
    "title": "LCA with Brightway",
    "section": "In the brightway documentation",
    "text": "In the brightway documentation\n\nHere for brightway 2.5"
  },
  {
    "objectID": "brightway_page.html#in-the-literature",
    "href": "brightway_page.html#in-the-literature",
    "title": "LCA with Brightway",
    "section": "In the literature",
    "text": "In the literature\n\nNotebooks and data from Douziech et al. 2023 for prospective LCA of the energy and heating sector."
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#python",
    "href": "presentations/presentation_seminar_intro_only.html#python",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Python",
    "text": "Python"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#python-packages",
    "href": "presentations/presentation_seminar_intro_only.html#python-packages",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Python packages",
    "text": "Python packages\n\n\n\n\nExamples:\n\npandas for data tables manipulation,\nmatplotlib for figures,\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#brightway",
    "href": "presentations/presentation_seminar_intro_only.html#brightway",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Brightway",
    "text": "Brightway"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#code-editor",
    "href": "presentations/presentation_seminar_intro_only.html#code-editor",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Code editor",
    "text": "Code editor\n\n\n\n\nExamples:\n\nJupyter\nSpider\nPyCharm\nVisual Studio Code\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#the-activity-browser",
    "href": "presentations/presentation_seminar_intro_only.html#the-activity-browser",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#brightway-1",
    "href": "presentations/presentation_seminar_intro_only.html#brightway-1",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Brightway",
    "text": "Brightway\n\n\nFast calculations\nParameters in the inventory\nUncertainty analysis (Monte-Carlo simulation)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#brightway-2",
    "href": "presentations/presentation_seminar_intro_only.html#brightway-2",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Brightway",
    "text": "Brightway\nAnd extensions for:\n\n\nRegionalization with bw2regional\nTemporal distributions in the inventory and for characterization factors with temporalis\nProspective foreground databases based on IAM with premise\nGlobal sensitivity analysis with lca_algebraic\nStill in development: collaborative work on the same LCA model on a server"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#the-activity-browser-1",
    "href": "presentations/presentation_seminar_intro_only.html#the-activity-browser-1",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser\nSimilar to brightway but more user friendly. Advanced tasks:\n\n\nUse of scenarios\nVisualization tools (Sankey diagram)\nPlugin for prospective background databases with premise"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#code-editor-1",
    "href": "presentations/presentation_seminar_intro_only.html#code-editor-1",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "Code editor",
    "text": "Code editor"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_only.html#the-activity-browser-2",
    "href": "presentations/presentation_seminar_intro_only.html#the-activity-browser-2",
    "title": "Introduction the Activity Browser and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html",
    "href": "presentations/presentation_seminar_intro_examples.html",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "",
    "text": "Find the slides at adelinejerome.github.io/seminars-for-esa/seminar_intro.html"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#greater-flexibility",
    "href": "presentations/presentation_seminar_intro_examples.html#greater-flexibility",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Greater flexibility",
    "text": "Greater flexibility\n\n\nNon-standard LCA methodological choices\nConnection to other tools (e.g., IAM, statistics, ML)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#reproducibility-and-transparency",
    "href": "presentations/presentation_seminar_intro_examples.html#reproducibility-and-transparency",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Reproducibility and transparency",
    "text": "Reproducibility and transparency\n\n\nFor understanding what you did\nFor the others to understand what you did\nFor you/others to use the same methodology"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#easier-to-update",
    "href": "presentations/presentation_seminar_intro_examples.html#easier-to-update",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Easier to update",
    "text": "Easier to update\n\n\nLess room for error when updating data inputs\nAutomatic update of the whole work\nUpdate/change ecoinvent (the background database)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#easier-version-control-with-git",
    "href": "presentations/presentation_seminar_intro_examples.html#easier-version-control-with-git",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Easier version control with Git",
    "text": "Easier version control with Git\n\n\nChange-tracking\nBackup\nCollaboration"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#python",
    "href": "presentations/presentation_seminar_intro_examples.html#python",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Python",
    "text": "Python"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#python-packages",
    "href": "presentations/presentation_seminar_intro_examples.html#python-packages",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Python packages",
    "text": "Python packages\n\n\n\n\nExamples:\n\npandas for data tables manipulation,\nmatplotlib for figures,\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#brightway",
    "href": "presentations/presentation_seminar_intro_examples.html#brightway",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#code-editor",
    "href": "presentations/presentation_seminar_intro_examples.html#code-editor",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Code editor",
    "text": "Code editor\n\n\n\n\nExamples:\n\nJupyter\nSpider\nPyCharm\nVisual Studio Code\n…"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#the-activity-browser",
    "href": "presentations/presentation_seminar_intro_examples.html#the-activity-browser",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#brightway-1",
    "href": "presentations/presentation_seminar_intro_examples.html#brightway-1",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway\n\n\nFast calculations\nParameters in the inventory\nUncertainty analysis (Monte-Carlo simulation)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#brightway-2",
    "href": "presentations/presentation_seminar_intro_examples.html#brightway-2",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Brightway",
    "text": "Brightway\nAnd extensions for:\n\n\nRegionalization with bw2regional\nTemporal distributions in the inventory and for characterization factors with temporalis\nProspective foreground databases based on IAM with premise\nGlobal sensitivity analysis with lca_algebraic\nStill in development: collaborative work on the same LCA model on a server"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#the-activity-browser-1",
    "href": "presentations/presentation_seminar_intro_examples.html#the-activity-browser-1",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "The Activity Browser",
    "text": "The Activity Browser\nSimilar to brightway but more user friendly. Advanced tasks:\n\n\nUse of scenarios\nVisualization tools (Sankey diagram)\nPlugin for prospective background databases with premise"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#yes-you-can",
    "href": "presentations/presentation_seminar_intro_examples.html#yes-you-can",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Yes you can!",
    "text": "Yes you can!"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#my-initial-workflow",
    "href": "presentations/presentation_seminar_intro_examples.html#my-initial-workflow",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "My initial workflow",
    "text": "My initial workflow"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#my-ideal-workflow",
    "href": "presentations/presentation_seminar_intro_examples.html#my-ideal-workflow",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "My ideal workflow",
    "text": "My ideal workflow"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#get-help",
    "href": "presentations/presentation_seminar_intro_examples.html#get-help",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Get help",
    "text": "Get help\n\n\nFrom your colleagues 👋\nFrom ChatGPT\nFrom the documentation or user manual\nFrom the community:\n\nOn mail distribution lists on groups.io\nOn Stackoverflow\nOn GitHub (for bugs)"
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#main-source-of-information",
    "href": "presentations/presentation_seminar_intro_examples.html#main-source-of-information",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Main source of information",
    "text": "Main source of information\nGo to the GiHub pages (the AB, brightway) to find updated information or links to:\n\nInstall the tools,\nLearn how to use it,\nFind examples."
  },
  {
    "objectID": "presentations/presentation_seminar_intro_examples.html#website-to-gather-tips-and-resources",
    "href": "presentations/presentation_seminar_intro_examples.html#website-to-gather-tips-and-resources",
    "title": "Introduction to LCA with the AB and Brightway",
    "section": "Website to gather tips and resources",
    "text": "Website to gather tips and resources\nSeminars for ESA as an initial resource.\nYou are welcome to contribute!"
  }
]